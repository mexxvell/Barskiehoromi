import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OWNER_ID = os.getenv('OWNER_TELEGRAM_ID')  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

# –°–ª–æ–≤–∞—Ä–∏
TIME_SLOTS = {
    'breakfast': ['08:00', '09:00', '10:00'],
    'dinner': ['18:00', '19:00', '20:00']
}

FOOD_MENU = {
    'breakfast': {
        'ü•û –Ø–∏—á–Ω–∏—Ü–∞': 'omelette',
        'üßá –ë–ª–∏–Ω—ã': 'pancakes',
        'üçµ –ß–∞–π': 'tea'
    },
    'dinner': {
        'üç≤ –°—É–ø 1': 'soup1',
        'üç≤ –°—É–ø 2': 'soup2',
        'üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º': 'meat_puree'
    }
}

PHOTO_PATHS = {
    'main': 'photos/main_photo.jpg',
    'room1': 'photos/room1.jpg',
    'room2': 'photos/room2.jpg'
}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
            ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2"],
            ["üõçÔ∏è –ö—É–ø–∏—Ç—å —Å—É–≤–µ–Ω–∏—Ä—ã"]
        ],
        resize_keyboard=True
    )

    with open(PHOTO_PATHS['main'], 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
async def choose_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {text}")

    room_number = text[-1]
    context.user_data['room'] = room_number

    with open(PHOTO_PATHS[f'room{room_number}'], 'rb') as photo:
        await update.message.reply_photo(photo=photo)

    meal_keyboard = ReplyKeyboardMarkup(
        [
            ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩÔ∏è –£–∂–∏–Ω"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=meal_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –µ–¥—ã
async def choose_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {text}")

    meal_type = text.strip().lower()
    context.user_data['meal_type'] = meal_type

    menu = FOOD_MENU[meal_type]
    buttons = [[key] for key in menu.keys()]
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {text}")

    meal_type = context.user_data['meal_type']
    food_choice = next(k for k, v in FOOD_MENU[meal_type].items() if k == text)
    context.user_data['food_choice'] = food_choice

    time_slots = TIME_SLOTS[meal_type]
    buttons = [[slot] for slot in time_slots]
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {text}")

    time_choice = text.strip()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º –¥–æ–º–∞!", reply_markup=ReplyKeyboardRemove())

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    room = context.user_data['room']
    meal_type = context.user_data['meal_type']
    food = next(k for k, v in FOOD_MENU[meal_type].items() if v == context.user_data['food_choice'])

    message = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type.capitalize()}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_choice}"
    )
    await context.bot.send_message(chat_id=OWNER_ID, text=message)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ [12]$'), choose_room))
    app.add_handler(MessageHandler(filters.Regex(r'^üç≥ –ó–∞–≤—Ç—Ä–∞–∫$|^üçΩÔ∏è –£–∂–∏–Ω$'), choose_meal_type))
    app.add_handler(MessageHandler(filters.Regex(r'^ü•û –Ø–∏—á–Ω–∏—Ü–∞$|^üßá –ë–ª–∏–Ω—ã$|^üçµ –ß–∞–π$|^üç≤ –°—É–ø 1$|^üç≤ –°—É–ø 2$|^üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º$'), choose_food))
    app.add_handler(MessageHandler(filters.Regex(r'^\d{2}:\d{2}$'), confirm_order))

    app.run_polling()

if __name__ == '__main__':
    main()