import os
import logging
import threading
import requests
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com")

# –ú–µ–Ω—é –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
FOOD_MENU = {
    "breakfast": ["–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞", "–Ø–∏—á–Ω–∏—Ü–∞", "–ë–ª–∏–Ω—ã"],
    "dinner": ["–°—É–ø", "–†—ã–±–∞", "–ü–ª–æ–≤"]
}

TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, OWNER_ID, RENDER_URL]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =================
@bot.message_handler(commands=["start"])
def start(message):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
        types.KeyboardButton("üõé –ü–æ–º–æ—â—å")
    )
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é\n2) –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    home_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    home_submenu.add(types.KeyboardButton("üçΩ –ï–¥–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "üè° –ù–∞—à –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω...", reply_markup=home_submenu)

@bot.message_handler(func=lambda m: m.text == "üçΩ –ï–¥–∞")
def handle_food(message):
    meal_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    meal_keyboard.add(types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"), types.KeyboardButton("üçΩ –£–∂–∏–Ω"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –µ–¥—ã:", reply_markup=meal_keyboard)

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def choose_meal_type(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    buttons = [types.KeyboardButton(food) for food in FOOD_MENU[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", 
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons))

@bot.message_handler(func=lambda m: m.text in FOOD_MENU["breakfast"] + FOOD_MENU["dinner"])
def choose_food(message):
    meal_type = "breakfast" if message.text in FOOD_MENU["breakfast"] else "dinner"
    buttons = [types.KeyboardButton(slot) for slot in TIME_SLOTS[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                    reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons))

@bot.message_handler(func=lambda m: any(m.text in slots for slots in TIME_SLOTS.values()))
def confirm_order(message):
    user_id = message.chat.id
    meal_type = "breakfast" if message.text in TIME_SLOTS["breakfast"] else "dinner"
    food = next((item for sublist in FOOD_MENU.values() for item in sublist if item in message.text), None)
    
    bot.send_message(user_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(OWNER_ID, f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ {user_id}\nüçΩÔ∏è {meal_type}\nüç≤ {food}\n‚è∞ {message.text}")

@bot.message_handler(func=lambda m: m.text == "üåÜ –ì–æ—Ä–æ–¥")
def handle_city(message):
    city_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    city_submenu.add(types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ...", reply_markup=city_submenu)

@bot.message_handler(func=lambda m: m.text == "üèõÔ∏è –ú—É–∑–µ–π")
def handle_museum(message):
    bot.send_message(message.chat.id, "üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫...")
    start(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã")
def handle_souvenirs(message):
    souvenir_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    souvenir_submenu.add(types.KeyboardButton("üß≤ –ú–∞–≥–Ω–∏—Ç"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã...", reply_markup=souvenir_submenu)

@bot.message_handler(func=lambda m: m.text == "üß≤ –ú–∞–≥–Ω–∏—Ç")
def handle_magnet(message):
    bot.send_message(message.chat.id, "üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ - 100—Ä")
    start(message)

@bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def handle_feedback(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(msg, send_feedback)

def send_feedback(message):
    bot.send_message(OWNER_ID, f"üì¨ –û—Ç–∑—ã–≤ –æ—Ç {message.chat.id}:\n{message.text}")
    bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

@bot.message_handler(func=lambda m: m.text == "üõé –ü–æ–º–æ—â—å")
def handle_help(message):
    help_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    help_menu.add(types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"), types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–ü–æ–º–æ—â—å:", reply_markup=help_menu)

@bot.message_handler(func=lambda m: m.text in ["üöñ –¢–∞–∫—Å–∏", "üè• –ë–æ–ª—å–Ω–∏—Ü–∞"])
def handle_services(message):
    if message.text == "üöñ –¢–∞–∫—Å–∏":
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫—Å–∏: +7-XXX-XXX-XX-XX")
    else:
        bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å –±–æ–ª—å–Ω–∏—Ü—ã: —É–ª. –ë–æ–ª—å–Ω–∏—á–Ω–∞—è, 1")

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    start(message)

# ================= FLASK ROUTES =================
@app.route("/")
def index():
    return "Bot is running!"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = types.Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    return "", 200

@app.route("/ping")
def ping():
    return "OK", 200

# ================= –ó–ê–ü–£–°–ö =================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
