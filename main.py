import os
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, OWNER_ID]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

FOOD_MENU = {
    "breakfast": {
        "ü•û –Ø–∏—á–Ω–∏—Ü–∞": "omelette",
        "üßá –ë–ª–∏–Ω—ã": "pancakes",
        "üçµ –ß–∞–π": "tea"
    },
    "dinner": {
        "üç≤ –ë–æ—Ä—â": "soup1",
        "üç≤ –°–æ–ª—è–Ω–∫–∞": "soup2",
        "üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º": "meat_puree"
    }
}

PHOTO_PATHS = {
    "main": "photos/main_photo.jpg",
    "room1": "photos/room1.jpg",
    "room2": "photos/room2.jpg",
    "museum": "photos/museum_carpathian_front.jpg",
    "souvenir": "photos/souvenir_magnet.jpg"
}

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = ReplyKeyboardMarkup(
        [
            ["üè† –û –¥–æ–º–µ", "üåÜ –ì–æ—Ä–æ–¥"],
            ["üõé –ü–æ–º–æ—â—å", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é\n"
        "2) –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "3) –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –µ–¥—ã —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "4) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ö–æ–∑—è–µ–≤–∞–º\n"
        "5) –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        reply_markup=main_keyboard
    )
    context.user_data["current_menu"] = "main"

async def handle_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(PHOTO_PATHS["main"], "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üè° –û –¥–æ–º–µ:\n"
                    "–ù–∞—à –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –º–µ—Å—Ç–µ. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç.\n"
                    "–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."
        )
    home_submenu = ReplyKeyboardMarkup(
        [
            ["üçΩ –ï–¥–∞"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=home_submenu)
    context.user_data["current_menu"] = "home"

async def handle_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["current_menu"] = "food"
    meal_keyboard = ReplyKeyboardMarkup(
        [
            ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üçΩ –ú–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ —É–∂–∏–Ω.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ö–æ–∑—è–µ–≤–∞–º.",
        reply_markup=meal_keyboard
    )

async def choose_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    meal_type_map = {
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫": "breakfast",
        "üçΩ –£–∂–∏–Ω": "dinner"
    }

    meal_type = meal_type_map.get(text)
    if not meal_type:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    context.user_data["meal_type"] = meal_type
    context.user_data["current_menu"] = "food"

    menu = FOOD_MENU[meal_type]
    buttons = [[key] for key in menu.keys()]
    buttons.append(["üîô –ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)

async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    meal_type = context.user_data["meal_type"]
    food_choice = next(k for k, v in FOOD_MENU[meal_type].items() if k == text)
    context.user_data["food_choice"] = food_choice
    context.user_data["current_menu"] = "time"

    time_slots = TIME_SLOTS[meal_type]
    buttons = [[slot] for slot in time_slots]
    buttons.append(["üîô –ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    time_choice = text.strip()
    user_id = update.effective_user.id

    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º –¥–æ–º–∞!", reply_markup=ReplyKeyboardRemove())

    meal_type = context.user_data["meal_type"]
    food = next(k for k, v in FOOD_MENU[meal_type].items() if v == context.user_data["food_choice"])

    message = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type.capitalize()}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_choice}"
    )
    await update.effective_bot.send_message(chat_id=OWNER_ID, text=message)

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["current_menu"] = "city"
    city_submenu = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üåÜ –ì. –ë–µ–ª–æ–º–æ—Ä—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è:\n"
        "–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~12 000 —á–µ–ª.\n"
        "–®—Ç–∞–± –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –í–û–í –Ω–∞—Ö–æ–¥–∏–ª—Å—è –∑–¥–µ—Å—å.",
        reply_markup=city_submenu
    )

async def handle_attractions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["current_menu"] = "attractions"
    attractions_submenu = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=attractions_submenu)

async def handle_museum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(PHOTO_PATHS["museum"], "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, –¥. 26"
        )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(
        [["üè† –û –¥–æ–º–µ", "üåÜ –ì–æ—Ä–æ–¥", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "üõé –ü–æ–º–æ—â—å"],
         ["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    ))

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["current_menu"] = "feedback"
    await update.message.reply_text(
        "üí¨ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∏–ª–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'."
    )

async def send_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "current_menu" not in context.user_data or context.user_data["current_menu"] != "feedback":
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'.")
        return

    user_message = update.message.text
    message = f"üì¨ –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n{user_message}"
    await update.effective_bot.send_message(chat_id=OWNER_ID, text=message)
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ–∑—è–µ–≤–∞–º!", reply_markup=ReplyKeyboardRemove())

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_submenu = ReplyKeyboardMarkup(
        [
            ["üöñ –¢–∞–∫—Å–∏", "üè• –ë–æ–ª—å–Ω–∏—Ü–∞"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "üõéÔ∏è –ü–æ–º–æ—â—å:\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏ —É—Å–ª—É–≥–∞—Ö.",
        reply_markup=help_submenu
    )
    context.user_data["current_menu"] = "help"

async def handle_taxi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöñ –¢–∞–∫—Å–∏:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫—Å–∏: +7-999-999-99-99",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )

async def handle_hospital(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè• –ë–æ–ª—å–Ω–∏—Ü–∞:\n"
        "–ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–æ–ª—å–Ω–∏—á–Ω–∞—è, –¥. 1",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_menu = context.user_data.get("current_menu", "main")
    if current_menu == "main":
        return

    if current_menu == "home":
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üè† –û –¥–æ–º–µ", "üåÜ –ì–æ—Ä–æ–¥"],
                ["üõé –ü–æ–º–æ—â—å", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)
    elif current_menu == "city":
        city_submenu = ReplyKeyboardMarkup(
            [
                ["üåÜ –ì–æ—Ä–æ–¥", "üè† –û –¥–æ–º–µ"],
                ["–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "üõé –ü–æ–º–æ—â—å"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("üåÜ –ì–æ—Ä–æ–¥:", reply_markup=city_submenu)
    elif current_menu == "food":
        meal_submenu = ReplyKeyboardMarkup(
            [
                ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=meal_submenu)
    elif current_menu == "time":
        meal_type = context.user_data["meal_type"]
        menu = FOOD_MENU[meal_type]
        buttons = [[key] for key in menu.keys()]
        buttons.append(["üîô –ù–∞–∑–∞–¥"])
        keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)
    elif current_menu == "help":
        help_submenu = ReplyKeyboardMarkup(
            [
                ["üöñ –¢–∞–∫—Å–∏", "üè• –ë–æ–ª—å–Ω–∏—Ü–∞"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("üõéÔ∏è –ü–æ–º–æ—â—å:", reply_markup=help_submenu)
    elif current_menu == "feedback":
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üè† –û –¥–æ–º–µ", "üåÜ –ì–æ—Ä–æ–¥"],
                ["üõé –ü–æ–º–æ—â—å", "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)
        context.user_data["current_menu"] = "main"

# ================= –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê =================
async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r"^üè† –û –¥–æ–º–µ$"), handle_home))
    application.add_handler(MessageHandler(filters.Regex(r"^üçΩ –ï–¥–∞$"), handle_food))
    application.add_handler(MessageHandler(filters.Regex(r"^üç≥ –ó–∞–≤—Ç—Ä–∞–∫$|^üçΩ –£–∂–∏–Ω$"), choose_meal_type))
    application.add_handler(MessageHandler(filters.Regex(r"^ pancakes|omelette|tea|soup1|soup2|meat_puree$"), choose_food))
    application.add_handler(MessageHandler(filters.Regex(r"^\d{2}:\d{2}$"), confirm_order))
    application.add_handler(MessageHandler(filters.Regex(r"^üåÜ –ì–æ—Ä–æ–¥$"), handle_city))
    application.add_handler(MessageHandler(filters.Regex(r"^üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏$"), handle_attractions))
    application.add_handler(MessageHandler(filters.Regex(r"^üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞$"), handle_museum))
    application.add_handler(MessageHandler(filters.Regex(r"^–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å$"), handle_feedback))
    application.add_handler(MessageHandler(filters.Regex(r"^‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å$"), send_feedback))
    application.add_handler(MessageHandler(filters.Regex(r"^üõé –ü–æ–º–æ—â—å$"), handle_help))
    application.add_handler(MessageHandler(filters.Regex(r"^üöñ –¢–∞–∫—Å–∏$"), handle_taxi))
    application.add_handler(MessageHandler(filters.Regex(r"^üè• –ë–æ–ª—å–Ω–∏—Ü–∞$"), handle_hospital))
    application.add_handler(MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), go_back))

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    PORT = int(os.getenv("PORT", 8000))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8000
    WEBHOOK_URL = f"https://barskiehoromi.onrender.com :{PORT}/{TOKEN}"

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        await application.bot.set_webhook(WEBHOOK_URL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    await application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    asyncio.run(main())
