import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OWNER_ID = os.getenv('OWNER_TELEGRAM_ID')  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

# –°–ª–æ–≤–∞—Ä–∏
TIME_SLOTS = {
    'breakfast': ['08:00', '09:00', '10:00'],
    'dinner': ['18:00', '19:00', '20:00']
}

FOOD_MENU = {
    'breakfast': {
        'ü•û –Ø–∏—á–Ω–∏—Ü–∞': 'omelette',
        'üßá –ë–ª–∏–Ω—ã': 'pancakes',
        'üçµ –ß–∞–π': 'tea'
    },
    'dinner': {
        'üç≤ –°—É–ø 1': 'soup1',
        'üç≤ –°—É–ø 2': 'soup2',
        'üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º': 'meat_puree'
    }
}

PHOTO_PATHS = {
    'main': 'photos/main_photo.jpg',
    'room1': 'photos/room1.jpg',
    'room2': 'photos/room2.jpg'
}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data='attractions')],
        [InlineKeyboardButton("üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1", callback_data='room1')],
        [InlineKeyboardButton("üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", callback_data='room2')],
        [InlineKeyboardButton("üõçÔ∏è –ö—É–ø–∏—Ç—å —Å—É–≤–µ–Ω–∏—Ä—ã", callback_data='souvenirs')]
    ])

    with open(PHOTO_PATHS['main'], 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
async def choose_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    room_number = query.data[-1]
    context.user_data['room'] = room_number

    with open(PHOTO_PATHS[f'room{room_number}'], 'rb') as photo:
        await query.message.reply_photo(photo=photo)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data='breakfast')],
        [InlineKeyboardButton("üçΩÔ∏è –£–∂–∏–Ω", callback_data='dinner')]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –µ–¥—ã
async def choose_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    meal_type = query.data
    context.user_data['meal_type'] = meal_type

    menu = FOOD_MENU[meal_type]
    buttons = [[InlineKeyboardButton(text, callback_data=value)] for text, value in menu.items()]
    keyboard = InlineKeyboardMarkup(buttons)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    food_choice = query.data
    meal_type = context.user_data['meal_type']
    context.user_data['food_choice'] = food_choice

    time_slots = TIME_SLOTS[meal_type]
    buttons = [[InlineKeyboardButton(slot, callback_data=slot)] for slot in time_slots]
    keyboard = InlineKeyboardMarkup(buttons)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    time_choice = query.data

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await query.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º –¥–æ–º–∞!")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    room = context.user_data['room']
    meal_type = context.user_data['meal_type']
    food = next(k for k, v in FOOD_MENU[meal_type].items() if v == context.user_data['food_choice'])

    message = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type.capitalize()}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_choice}"
    )
    await context.bot.send_message(chat_id=OWNER_ID, text=message)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_room, pattern=r'room[12]'))
    app.add_handler(CallbackQueryHandler(choose_meal_type, pattern=r'(breakfast|dinner)'))
    app.add_handler(CallbackQueryHandler(choose_food, pattern=r'(omelette|pancakes|tea|soup1|soup2|meat_puree)'))
    app.add_handler(CallbackQueryHandler(confirm_order, pattern=r'\d{2}:\d{2}'))

    app.run_polling()

if __name__ == '__main__':
    main()