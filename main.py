import os
import logging
import requests
import threading
from flask import Flask, request
import telebot
from telebot import types
from waitress import serve

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, OWNER_ID, RENDER_URL]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

FOOD_MENU = {
    "breakfast": {
        "ü•û –Ø–∏—á–Ω–∏—Ü–∞": "omelette",
        "üßá –ë–ª–∏–Ω—ã": "pancakes",
        "üçµ –ß–∞–π": "tea"
    },
    "dinner": {
        "üç≤ –°—É–ø 1": "soup1",
        "üç≤ –°—É–ø 2": "soup2",
        "üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º": "meat_puree"
    }
}

PHOTO_PATHS = {
    "main": "photos/main_photo.jpg",
    "museum": "photos/museum_carpathian_front.jpg",
    "souvenir": "photos/souvenir_magnet.jpg"
}

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =================
@bot.message_handler(commands=["start"])
def start(message):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõé –ü–æ–º–æ—â—å"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    )
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é\n"
        "2) –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "3) –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –µ–¥—ã —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "4) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ö–æ–∑—è–µ–≤–∞–º\n"
        "5) –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    with open(PHOTO_PATHS["main"], "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üè° –û –¥–æ–º–µ:\n"
                    "–ù–∞—à –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –º–µ—Å—Ç–µ. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç.\n"
                    "–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."
        )
    home_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    home_submenu.add(types.KeyboardButton("üçΩ –ï–¥–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=home_submenu)

@bot.message_handler(func=lambda m: m.text == "üçΩ –ï–¥–∞")
def handle_food(message):
    meal_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    meal_keyboard.add(
        types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üçΩ –£–∂–∏–Ω"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üçΩ –ú–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ —É–∂–∏–Ω.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ö–æ–∑—è–µ–≤–∞–º.",
        reply_markup=meal_keyboard
    )

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def choose_meal_type(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    user_id = message.chat.id
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1))
    
    buttons = [types.KeyboardButton(food) for food in FOOD_MENU[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=types.ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True))

@bot.message_handler(func=lambda m: m.text in FOOD_MENU["breakfast"] or m.text in FOOD_MENU["dinner"])
def choose_food(message):
    user_id = message.chat.id
    meal_type = "breakfast" if message.text in FOOD_MENU["breakfast"] else "dinner"
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1))
    
    buttons = [types.KeyboardButton(slot) for slot in TIME_SLOTS[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=types.ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True))

@bot.message_handler(func=lambda m: m.text in TIME_SLOTS["breakfast"] or m.text in TIME_SLOTS["dinner"])
def confirm_order(message):
    user_id = message.chat.id
    meal_type = "breakfast" if message.text in TIME_SLOTS["breakfast"] else "dinner"
    food = next(k for k, v in FOOD_MENU[meal_type].items() if v == bot.get_user_context()[user_id].get("food_choice"))
    
    bot.send_message(
        user_id,
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º –¥–æ–º–∞!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    message_text = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type.capitalize()}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {message.text}"
    )
    bot.send_message(OWNER_ID, message_text)

@bot.message_handler(func=lambda m: m.text == "üåÜ –ì–æ—Ä–æ–¥")
def handle_city(message):
    city_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    city_submenu.add(types.KeyboardButton("üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(
        message.chat.id,
        "üåÜ –ì. –ë–µ–ª–æ–º–æ—Ä—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è:\n"
        "–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~12 000 —á–µ–ª.\n"
        "–®—Ç–∞–± –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –í–û–í –Ω–∞—Ö–æ–¥–∏–ª—Å—è –∑–¥–µ—Å—å.",
        reply_markup=city_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
def handle_attractions(message):
    attractions_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    attractions_submenu.add(types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(
        message.chat.id,
        "üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=attractions_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞")
def handle_museum(message):
    with open(PHOTO_PATHS["museum"], "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, –¥. 26"
        )
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
        types.KeyboardButton("üõé –ü–æ–º–æ—â—å")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã")
def handle_souvenirs(message):
    souvenir_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    souvenir_submenu.add(types.KeyboardButton("üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(
        message.chat.id,
        "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã:",
        reply_markup=souvenir_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
def handle_magnet(message):
    with open(PHOTO_PATHS["souvenir"], "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ (50 –≥—Ä) - 100—Ä"
        )
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
        types.KeyboardButton("üõé –ü–æ–º–æ—â—å")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def handle_feedback(message):
    bot.send_message(
        message.chat.id,
        "üí¨ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∏–ª–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'."
    )
    bot.register_next_step_handler(message, send_feedback)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
def send_feedback(message):
    user_message = message.text
    message_text = f"üì¨ –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n{user_message}"
    bot.send_message(OWNER_ID, message_text)
    bot.send_message(
        message.chat.id,
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ–∑—è–µ–≤–∞–º!",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda m: m.text == "üõé –ü–æ–º–æ—â—å")
def handle_help(message):
    help_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    help_submenu.add(
        types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"),
        types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üõéÔ∏è –ü–æ–º–æ—â—å:\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏ —É—Å–ª—É–≥–∞—Ö.",
        reply_markup=help_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üöñ –¢–∞–∫—Å–∏")
def handle_taxi(message):
    bot.send_message(
        message.chat.id,
        "üöñ –¢–∞–∫—Å–∏:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫—Å–∏: +7-999-999-99-99",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[types.KeyboardButton("üîô –ù–∞–∑–∞–¥")]])
    )

@bot.message_handler(func=lambda m: m.text == "üè• –ë–æ–ª—å–Ω–∏—Ü–∞")
def handle_hospital(message):
    bot.send_message(
        message.chat.id,
        "üè• –ë–æ–ª—å–Ω–∏—Ü–∞:\n"
        "–ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–æ–ª—å–Ω–∏—á–Ω–∞—è, –¥. 1",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[types.KeyboardButton("üîô –ù–∞–∑–∞–¥")]])
    )

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
        types.KeyboardButton("üõé –ü–æ–º–æ—â—å")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)

# ================= –§–õ–≠–®-–ú–ê–†–®–†–£–¢–´ =================
@app.route("/")
def index():
    return "Telegram-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_data(as_text=True))
    bot.process_new_updates([update])
    return "", 200

@app.route("/ping")
def ping():
    return "OK", 200

# ================= –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê =================
def self_ping():
    while True:
        try:
            response = requests.get(f"{RENDER_URL}/ping")
            logger.info(f"Self-ping: Status {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ self-ping: {str(e)}")
        threading.Event().wait(300)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    PORT = int(os.getenv("PORT", 8000))
    serve(app, host="0.0.0.0", port=PORT)
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞
    ping_thread = threading.Thread(target=self_ping, daemon=True)
    ping_thread.start()
