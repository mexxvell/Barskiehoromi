import os
import logging
import asyncio
import aiohttp
import threading
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from flask import Flask
from waitress import serve

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, RENDER_URL]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

FOOD_MENU = {
    "breakfast": {
        "ü•û –Ø–∏—á–Ω–∏—Ü–∞": "omelette",
        "üßá –ë–ª–∏–Ω—ã": "pancakes",
        "üçµ –ß–∞–π": "tea"
    },
    "dinner": {
        "üç≤ –°—É–ø 1": "soup1",
        "üç≤ –°—É–ø 2": "soup2",
        "üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º": "meat_puree"
    }
}

PHOTO_PATHS = {
    "main": "photos/main_photo.jpg",
    "room1": "photos/room1.jpg",
    "room2": "photos/room2.jpg",
    "museum": "photos/museum_carpathian_front.jpg",
    "souvenir": "photos/souvenir_magnet.jpg"
}

app = Flask(__name__)

@app.route("/ping")
def ping():
    return "OK", 200

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
            ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
        ],
        resize_keyboard=True
    )

    with open(PHOTO_PATHS["main"], "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_keyboard
        )
    context.user_data["current_menu"] = "main"

async def choose_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    room_number = text[-1]
    context.user_data["room"] = room_number
    context.user_data["current_menu"] = "meal"

    with open(PHOTO_PATHS[f"room{room_number}"], "rb") as photo:
        await update.message.reply_photo(photo=photo)

    meal_keyboard = ReplyKeyboardMarkup(
        [
            ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩÔ∏è –£–∂–∏–Ω"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=meal_keyboard)

async def choose_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    meal_type_map = {
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫": "breakfast",
        "üçΩÔ∏è –£–∂–∏–Ω": "dinner"
    }

    meal_type = meal_type_map.get(text)
    if not meal_type:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    context.user_data["meal_type"] = meal_type
    context.user_data["current_menu"] = "food"

    menu = FOOD_MENU[meal_type]
    buttons = [[key] for key in menu.keys()]
    buttons.append(["üîô –ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)

async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    meal_type = context.user_data["meal_type"]
    food_choice = next(k for k, v in FOOD_MENU[meal_type].items() if k == text)
    context.user_data["food_choice"] = food_choice
    context.user_data["current_menu"] = "time"

    time_slots = TIME_SLOTS[meal_type]
    buttons = [[slot] for slot in time_slots]
    buttons.append(["üîô –ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    time_choice = text.strip()

    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º –¥–æ–º–∞!", reply_markup=ReplyKeyboardRemove())

    room = context.user_data["room"]
    meal_type = context.user_data["meal_type"]
    food = next(k for k, v in FOOD_MENU[meal_type].items() if v == context.user_data["food_choice"])

    message = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type.capitalize()}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_choice}"
    )
    await context.bot.send_message(chat_id=OWNER_ID, text=message)

async def handle_attractions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["current_menu"] = "attractions"
    attractions_keyboard = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=attractions_keyboard)

async def handle_museum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(PHOTO_PATHS["museum"], "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, –¥. 26"
        )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(
        [["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"], ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]],
        resize_keyboard=True
    ))

async def handle_souvenirs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["current_menu"] = "souvenirs"
    souvenir_keyboard = ReplyKeyboardMarkup(
        [
            ["üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–≤–µ–Ω–∏—Ä:", reply_markup=souvenir_keyboard)

async def handle_magnet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(PHOTO_PATHS["souvenir"], "rb") as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"
        )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(
        [["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"], ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]],
        resize_keyboard=True
    ))

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_menu = context.user_data.get("current_menu", "main")
    
    if current_menu == "meal":
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
                ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)
        context.user_data["current_menu"] = "main"
    
    elif current_menu in ["attractions", "souvenirs"]:
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
                ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)
        context.user_data["current_menu"] = "main"
    
    elif current_menu == "food":
        meal_keyboard = ReplyKeyboardMarkup(
            [
                ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩÔ∏è –£–∂–∏–Ω"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=meal_keyboard)
        context.user_data["current_menu"] = "meal"
    
    elif current_menu == "time":
        meal_type = context.user_data["meal_type"]
        menu = FOOD_MENU[meal_type]
        buttons = [[key] for key in menu.keys()]
        buttons.append(["üîô –ù–∞–∑–∞–¥"])
        keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)
        context.user_data["current_menu"] = "food"

# ================= –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê =================

async def self_ping():
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{RENDER_URL}/ping") as response:
                    logger.info(f"Self-ping: Status {response.status}")
        except Exception as e:
            logger.error(f"Self-ping error: {str(e)}")
        await asyncio.sleep(300)

def run_flask():
    serve(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

async def main():
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r"^üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ [12]$"), choose_room))
    application.add_handler(MessageHandler(filters.Regex(r"^üç≥ –ó–∞–≤—Ç—Ä–∞–∫$|^üçΩÔ∏è –£–∂–∏–Ω$"), choose_meal_type))
    application.add_handler(MessageHandler(filters.Regex(r"^ü•û –Ø–∏—á–Ω–∏—Ü–∞$|^üßá –ë–ª–∏–Ω—ã$|^üçµ –ß–∞–π$|^üç≤ –°—É–ø 1$|^üç≤ –°—É–ø 2$|^üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º$"), choose_food))
    application.add_handler(MessageHandler(filters.Regex(r"^\d{2}:\d{2}$"), confirm_order))
    application.add_handler(MessageHandler(filters.Regex(r"^üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏$"), handle_attractions))
    application.add_handler(MessageHandler(filters.Regex(r"^üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞$"), handle_museum))
    application.add_handler(MessageHandler(filters.Regex(r"^üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä$"), handle_souvenirs))
    application.add_handler(MessageHandler(filters.Regex(r"^üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫$"), handle_magnet))
    application.add_handler(MessageHandler(filters.Regex(r"^üîô –ù–∞–∑–∞–¥$"), go_back))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
    await application.bot.set_webhook(WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    asyncio.create_task(self_ping())
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        webhook_url=WEBHOOK_URL,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    asyncio.run(main())