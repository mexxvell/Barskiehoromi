import os
import logging
import sqlite3
import threading
import time
import requests
from datetime import datetime
from flask import Flask, request
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_TELEGRAM_ID", "0"))
if not TOKEN or not OWNER_ID:
    raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ OWNER_TELEGRAM_ID")

RENDER_URL = os.getenv("RENDER_URL", "https://your-app.onrender.com")
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# --- –ë–î ---
def init_db():
    conn = sqlite3.connect('bot.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS merch_cart (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        item TEXT,
        quantity INTEGER
    )''')
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_seen TEXT
    )''')
    conn.commit()
    conn.close()

init_db()

# --- –¢–æ–≤–∞—Ä—ã ---
MERCH_ITEMS = {
    "üëõ –®–æ–ø–µ—Ä": (500, "shopper.jpg"),
    "‚òï –ö—Ä—É–∂–∫–∞": (300, "mug.jpg"),
    "üëï –§—É—Ç–±–æ–ª–∫–∞": (800, "tshirt.jpg"),
}

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
user_states = {}

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
def main_menu(chat_id, send_text=True):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞"),
        types.KeyboardButton("üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
        types.KeyboardButton("üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏‚Äë–π–æ–≥–∞"),
        types.KeyboardButton("üì∏ –ú–µ–¥–∏–∞"),
        types.KeyboardButton("üõç –ú–µ—Ä—á"),
        types.KeyboardButton("üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏")
    )
    if send_text:
        text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                "üë• –ö–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞–º–∏\n"
                "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç—É—Ä—ã –∏ —Ä–µ—Ç—Ä–∏—Ç—ã\n"
                "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏‚Äë–π–æ–≥–∞ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                "üì∏ –ú–µ–¥–∏–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
                "üõç –ú–µ—Ä—á ‚Äî –æ–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ScanDream\n"
                "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏ ‚Äî –≤—Å—ë –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞")
        bot.send_message(chat_id, text, reply_markup=keyboard)
    return keyboard

@bot.message_handler(commands=["start"])
def handler_start(m):
    track_user(m.chat.id)
    main_menu(m.chat.id)

# --- –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def track_user(user_id):
    conn = sqlite3.connect('bot.db')
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, first_seen) VALUES (?, ?)",
                (user_id, datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()

# --- –ú–µ–Ω—é ¬´–ö–æ–º–∞–Ω–¥–∞¬ª ---
@bot.message_handler(func=lambda m: m.text == "üë• –ö–æ–º–∞–Ω–¥–∞")
def handler_team(m):
    track_user(m.chat.id)
    text = ("–ù–∞—Å –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π –ë–∞–±–µ–Ω–∫–æ ‚Äî —É—á–∏—Ç–µ–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏‚Äë–π–æ–≥–∏, –≤–∏–∑–∏–æ–Ω–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—Å—Ç, –º–µ–¥–∏–∞‚Äë–ø—Ä–æ–¥—é—Å–µ—Ä.\n"
            "–ë–æ–ª–µ–µ 20 –ª–µ—Ç –ª–∏—á–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, 18 –ª–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–∏–Ω–≥–∞ —à–∫–æ–ª—ã –ê–º—Ä–∏—Ç –ù–∞–º –°–∞—Ä–æ–≤–∞—Ä (–§—Ä–∞–Ω—Ü–∏—è) –≤ –†–æ—Å—Å–∏–∏.\n"
            "–°–æ–∑–¥–∞—Ç–µ–ª—å –π–æ–≥–∞‚Äë–∫–µ–º–ø–∞ –∏ —Ä–µ—Ç—Ä–∏—Ç–æ–≤ –ø–æ –ö–∞—Ä–µ–ª–∏–∏, –°–µ–≤–µ—Ä–Ω–æ–π –û—Å–µ—Ç–∏–∏, –ì—Ä—É–∑–∏–∏, –ê—Ä–º–µ–Ω–∏–∏ –∏ –¢—É—Ä—Ü–∏–∏.\n\n"
            "–ò –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ì–æ–ª–∏–∫ ‚Äî —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ö–∞—Ç—Ö–∞‚Äë–π–æ–≥–∏, –∞—Ä–æ–º–∞–ø—Ä–∞–∫—Ç–∏–∫, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è —Å–ø—É—Ç–Ω–∏—Ü–∞ —Ä–µ—Ç—Ä–∏—Ç–æ–≤.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ"), types.KeyboardButton("üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏"))
    kb.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ")
def handler_brand(m):
    track_user(m.chat.id)
    text = ("ScanDream ‚Äî @scandream ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫. "
            "–ú–µ—Å—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π, –≥–¥–µ –º—ã –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç –ú–∏—Ä–∞.\n"
            "–ë—ã—Ç—å #scandream ‚Äî –∑–Ω–∞—á–∏—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –∂–∏–∑–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—á—Ç–æ–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º.\n"
            "–ü—Ä–æ–µ–∫—Ç ¬´–ô–æ–≥–∞‚Äë–∫–µ–º–ø¬ª ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑—ã (–Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è) –∏ —É–º–µ–Ω–∏–π (–Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã).")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
def handler_sources(m):
    track_user(m.chat.id)
    text = ("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
            "1. –ê–ª–µ–∫—Å–µ–π –í–ö ‚Äî https://vk.ru/scandream\n"
            "2. –ê–Ω–∞—Å—Ç–∞—Å–∏—è –í–ö ‚Äî https://vk.ru/yoga.golik\n"
            "3. –ö–∞–Ω–∞–ª ScanDream‚Ä¢Live ‚Äî https://t.me/scandream\n"
            "4. –¢–ì –ê–ª–µ–∫—Å–µ—è ‚Äî https://t.me/scandreamlife\n"
            "5. –¢–ì –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ ‚Äî https://t.me/yogagolik_dnevnik\n"
            "6. –ô–æ–≥–∞ —Å –ê–ª–µ–∫—Å–µ–µ–º (–í–ö) ‚Äî https://vk.ru/kyogababenko")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, text, reply_markup=kb)

# --- –î—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã (–∫–∞—Ä–∫–∞—Å) ---
@bot.message_handler(func=lambda m: m.text in ["üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏‚Äë–π–æ–≥–∞",
                                              "üì∏ –ú–µ–¥–∏–∞", "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏"])
def handler_other(m):
    track_user(m.chat.id)
    main_menu(m.chat.id)

# --- –ú–µ—Ä—á ---
@bot.message_handler(func=lambda m: m.text == "üõç –ú–µ—Ä—á")
def handler_merch(m):
    track_user(m.chat.id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for key in MERCH_ITEMS:
        keyboard.add(types.KeyboardButton(key))
    keyboard.add(types.KeyboardButton("üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, "üõç –ú–µ—Ä—á: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.text in MERCH_ITEMS)
def show_item(m):
    track_user(m.chat.id)
    name = m.text
    price, fname = MERCH_ITEMS[name]
    caption = f"{name[2:]} ‚Äî {price}‚ÇΩ"
    try:
        with open(f"photos/{fname}", "rb") as ph:
            bot.send_photo(m.chat.id, ph, caption=caption)
    except:
        bot.send_message(m.chat.id, caption)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)
    user_states[m.chat.id] = {"item": name}

@bot.message_handler(func=lambda m: m.chat.id in user_states and m.text == "‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å")
def ask_qty(m):
    bot.send_message(m.chat.id, "–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å?")
    user_states[m.chat.id]["stage"] = "ask_qty"

@bot.message_handler(func=lambda m: m.chat.id in user_states and user_states[m.chat.id].get("stage") == "ask_qty")
def save_qty(m):
    try:
        qty = int(m.text)
        if qty < 1: raise ValueError
    except:
        bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (>0)")
        return
    info = user_states.pop(m.chat.id)
    item = info["item"][2:]  # –±–µ–∑ —ç–º–æ–¥–∑–∏
    conn = sqlite3.connect('bot.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO merch_cart (user_id, item, quantity) VALUES (?, ?, ?)",
                (m.chat.id, item, qty))
    conn.commit()
    conn.close()
    bot.send_message(m.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item} √ó{qty} ‚úÖ")
    handler_merch(m)

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(m):
    track_user(m.chat.id)
    conn = sqlite3.connect('bot.db')
    cur = conn.cursor()
    cur.execute("SELECT item, quantity FROM merch_cart WHERE user_id=?", (m.chat.id,))
    data = cur.fetchall()
    conn.close()
    if not data:
        bot.send_message(m.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥")))
        return
    text = "üõç –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join([f"- {i}: {q}" for i, q in data])
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üì® –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, text, reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üì® –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
def finalize_order(m):
    conn = sqlite3.connect('bot.db')
    cur = conn.cursor()
    cur.execute("SELECT item, quantity FROM merch_cart WHERE user_id=?", (m.chat.id,))
    data = cur.fetchall()
    cur.execute("DELETE FROM merch_cart WHERE user_id=?", (m.chat.id,))
    conn.commit()
    conn.close()
    order = (f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{m.from_user.username or m.chat.id}:\n" +
             "\n".join([f"- {i} √ó{q}" for i, q in data]))
    bot.send_message(OWNER_ID, order)
    bot.send_message(m.chat.id, "–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéâ", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥")))

# --- –ê–≤—Ç–æ–ø–∏–Ω–≥ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
def send_stats():
    conn = sqlite3.connect('bot.db')
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users")
    count = cur.fetchone()[0]
    conn.close()
    today = datetime.utcnow().date().isoformat()
    bot.send_message(OWNER_ID, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {today}: —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî {count}")

def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping", timeout=5)
        except Exception as e:
            logger.error("Ping error: %s", e)
        time.sleep(300)

scheduler = BackgroundScheduler()
scheduler.add_job(send_stats, 'cron', hour=9, minute=0)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 UTC
scheduler.start()

threading.Thread(target=self_ping, daemon=True).start()

# --- Flask webhook ---
@app.route("/", methods=["GET"])
def index():
    return "OK", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
