import os
import logging
import sqlite3
import threading
import time
import requests
from io import BytesIO
from flask import Flask, request
import telebot
from telebot import types
from datetime import datetime, date

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    raise RuntimeError("TOKEN is required")
OWNER_ID = int(os.getenv("OWNER_TELEGRAM_ID", "0")) or None
if not OWNER_ID:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OWNER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    raise RuntimeError("OWNER_TELEGRAM_ID is required")
RENDER_URL = os.getenv("RENDER_URL", "https://your-app.onrender.com")
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    # –∫–æ—Ä–∑–∏–Ω–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É)
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_cart (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            item TEXT,
            quantity INTEGER,
            price INTEGER
        )
    ''')
    # –ª–æ–≥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS user_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT
        )
    ''')

    # —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            item TEXT,
            quantity INTEGER,
            price INTEGER,
            total INTEGER,
            date TEXT,
            status TEXT
        )
    ''')

    # –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    cur.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY
        )
    ''')

    conn.commit()
    conn.close()

init_db()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# --- –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –º–µ—Ä—á–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ: (—Ü–µ–Ω–∞, —Ñ–∞–π–ª —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ)) ---
MERCH_ITEMS = {
    "üëú –°—É–º–∫–∞ –®–æ–ø–ø–µ—Ä":   (500, ["shopper.jpg", "shopper1.jpg"]),
    "‚òï –ö—Ä—É–∂–∫–∏":    (300, "mug.jpg"),
    "üëï –§—É—Ç–±–æ–ª–∫–∏":  (800, "tshirt.jpg")
}

# --- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ª–æ–≥ ---
def log_user(user_id):
    today = str(date.today())
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM user_log WHERE user_id=? AND date=?", (user_id, today))
    if not cur.fetchone():
        cur.execute("INSERT INTO user_log (user_id, date) VALUES (?, ?)", (user_id, today))
        conn.commit()
    conn.close()

# --- –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 23:59) ---
def send_daily_stats():
    while True:
        now = datetime.now()
        if now.hour == 23 and now.minute == 59:
            today = str(date.today())
            conn = sqlite3.connect("bot_data.db")
            cur = conn.cursor()
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log WHERE date=?", (today,))
            count = cur.fetchone()[0]
            conn.close()
            try:
                bot.send_message(OWNER_ID, f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {today}: {count}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
            time.sleep(60)  # –∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        time.sleep(10)

threading.Thread(target=send_daily_stats, daemon=True).start()

# --- –ê–≤—Ç–æ–ø–∏–Ω–≥ ---
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping", timeout=5)
            logger.info("–ü–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ DB-—Ñ—É–Ω–∫—Ü–∏–∏ ---
def add_to_cart_db(user_id, item, quantity, price):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO merch_cart (user_id, item, quantity, price) VALUES (?, ?, ?, ?)",
                (user_id, item, quantity, price))
    conn.commit()
    conn.close()

def get_cart_items(user_id):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT item, quantity, price FROM merch_cart WHERE user_id=?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def clear_cart(user_id):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM merch_cart WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def create_order_from_cart(user_id, username):
    items = get_cart_items(user_id)
    if not items:
        return None
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    today = str(date.today())
    order_lines = []
    total_sum = 0
    for item, qty, price in items:
        total = qty * price
        total_sum += total
        cur.execute(
            "INSERT INTO merch_orders (user_id, username, item, quantity, price, total, date, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username, item, qty, price, total, today, "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        )
        order_lines.append(f"- {item} √ó{qty} = {total}‚ÇΩ")
    conn.commit()
    conn.close()
    clear_cart(user_id)
    return total_sum, order_lines

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@bot.message_handler(commands=["start"])
def start(message):
    log_user(message.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        types.KeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞"),
        types.KeyboardButton("üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
        types.KeyboardButton("üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞"),
        types.KeyboardButton("üì∏ –ú–µ–¥–∏–∞"),
        types.KeyboardButton("üõç –ú–µ—Ä—á"),
        types.KeyboardButton("üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏")
    )
    # –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ /admin, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫—É –≤ –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                "üë• –ö–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞–º–∏\n"
                "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç—É—Ä—ã –∏ —Ä–µ—Ç—Ä–∏—Ç—ã\n"
                "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                "üì∏ –ú–µ–¥–∏–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
                "üõç –ú–µ—Ä—á ‚Äî –æ–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ScanDream\n"
                "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏ ‚Äî –≤—Å—ë –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞", reply_markup=kb)

# --- –†–∞–∑–¥–µ–ª—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –î–æ–ø. —É—Å–ª—É–≥–∏) ---
@bot.message_handler(func=lambda m: m.text == "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
def travels_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", "üåç –ì–¥–µ –º—ã —Å–µ–π—á–∞—Å", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: –∞—Ä—Ö–∏–≤ –∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞")
def yoga_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞", "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞: –æ—Ñ–ª–∞–π–Ω, –æ–Ω–ª–∞–π–Ω –∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è.", reply_markup=kb)

# --- –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞ (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –µ—Å—Ç—å) ---
@bot.message_handler(func=lambda m: m.text == "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞")
def online_yoga(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–î–∞, —Ö–æ—á—É", "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", "üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
    bot.send_message(message.chat.id, """–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≤ –ø–æ–ª–µ –º–∞—Å—Ç–µ—Ä–∞ –æ–Ω–ª–∞–π–Ω. –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–∏–∫—Ç—É–µ–º—ã–µ —ç–ø–æ—Ö–æ–π –í–æ–¥–æ–ª–µ—è. –ú–µ–¥–∏—Ç–∞—Ü–∏–∏. –†–∞–±–æ—Ç–∞ –≤ –º–∞–ª—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.
–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –≤—Ç –∏ —á—Ç –≤ 05:00 –ø–æ –º—Å–∫. –í—Å–µ –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –≥—Ä—É–ø–ø—ã.
–¶–µ–Ω–Ω–æ—Å—Ç—å: 2500 —Ä—É–±–ª–µ–π –º–µ—Å—è—Ü, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ - 2300 —Ä—É–±.
–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª–∞—Å—Å?""", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "–î–∞, —Ö–æ—á—É")
def try_online_yoga(message):
    bot.send_message(message.chat.id, "https://disk.yandex.ru/i/nCQFa8edIspzNA")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", "üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –æ–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
def buy_subscription(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–ª–∞–¥–µ–ª—å—Ü—É
    user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.chat.id} —Ö–æ—á–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–Ω–ª–∞–π–Ω-–π–æ–≥—É."
    bot.send_message(OWNER_ID, user_info)
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üòä", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
def back_to_online_yoga_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞", "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞: –æ—Ñ–ª–∞–π–Ω, –æ–Ω–ª–∞–π–Ω –∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è.", reply_markup=kb)

# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∫–∞–∫ –±—ã–ª–∏) ---
@bot.message_handler(func=lambda m: m.text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def upcoming_events(message):
    bot.send_message(message.chat.id, """- 10 –∞–≤–≥—É—Å—Ç–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ ¬´–ë–æ–ª—å—à–æ–π –í–æ–ª–∂—Å–∫–∏–π –ü—É—Ç—å¬ª, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –∞–≤—Ç–æ–¥–æ–º–µ –∏–∑ –ö–∞—Ä–µ–ª–∏–∏ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏ –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥:

7 –∞–≤–≥—É—Å—Ç–∞ - –¢–æ–ª—å—è—Ç—Ç–∏ - <a href="https://t.me/+PosQ9pcHMIk4NjQ6">–ë–æ–ª—å—à–æ–π –∫–ª–∞—Å—Å –∏ —Å–∞—É–Ω–¥—Ö–∏–¥–∏–Ω–≥</a>
9 –∞–≤–≥—É—Å—Ç–∞ - –í–æ–ª–≥–æ–≥—Ä–∞–¥ - <a href="https://t.me/+ii8MpmrGhMo2YTVi">–ë–æ–ª—å—à–æ–π –∫–ª–∞—Å—Å –∏ —Å–∞—É–Ω–¥—Ö–∏–ª–∏–Ω–≥</a>
10 –∞–≤–≥—É—Å—Ç–∞ - –ø–ª–æ—â–∞–¥–∫–∞ 17 —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏ - –ë–æ–ª—å—à–æ–π –∫–ª–∞—Å—Å.

11 - 19 –∞–≤–≥—É—Å—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏ (–í–æ–ª–≥–æ–≥—Ä–∞–¥)""", parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "‚ñ∂Ô∏è YouTube")
def youtube_channel(message):
    bot.send_message(message.chat.id, "https://www.youtube.com/@ScanDreamChannel")

@bot.message_handler(func=lambda m: m.text == "üì∏ –ú–µ–¥–∏–∞")
def media_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ñ∂Ô∏è YouTube", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üé• –ú–µ–¥–∏–∞: –Ω–∞—à–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube.", reply_markup=kb)

# --- –î–æ–ø. —É—Å–ª—É–≥–∏: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ ---
@bot.message_handler(func=lambda m: m.text == "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏")
def services_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è", "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è")
def subscribe_events(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    try:
        cur.execute("INSERT OR IGNORE INTO subscriptions (user_id) VALUES (?)", (message.chat.id,))
        conn.commit()
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è. –ë—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ç—Ä–∏—Ç–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()

@bot.message_handler(func=lambda m: m.text == "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π")
def unsubscribe_events(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    try:
        cur.execute("DELETE FROM subscriptions WHERE user_id=?", (message.chat.id,))
        conn.commit()
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–±—ã—Ç–∏–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()

@bot.message_handler(func=lambda m: m.text == "üë• –ö–æ–º–∞–Ω–¥–∞")
def team_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè∑ –û –±—Ä–µ–Ω–¥–µ", "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, """–ù–∞—Å –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π –ë–∞–±–µ–Ω–∫–æ ‚Äî —É—á–∏—Ç–µ–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏, –≤–∏–∑–∏–æ–Ω–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—Å—Ç, –º–µ–¥–∏–∞-–ø—Ä–æ–¥—é—Å–µ—Ä.
–ë–æ–ª–µ–µ 20 –ª–µ—Ç –ª–∏—á–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, 18 –ª–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–∏–Ω–≥–∞ —à–∫–æ–ª—ã –ê–º—Ä–∏—Ç –ù–∞–º –°–∞—Ä–æ–≤–∞—Ä (–§—Ä–∞–Ω—Ü–∏—è) –≤ –†–æ—Å—Å–∏–∏.
–°–æ–∑–¥–∞—Ç–µ–ª—å –π–æ–≥–∞-–∫–µ–º–ø–∞ –∏ —Ä–µ—Ç—Ä–∏—Ç–æ–≤ –ø–æ –ö–∞—Ä–µ–ª–∏–∏, –°–µ–≤–µ—Ä–Ω–æ–π –û—Å–µ—Ç–∏–∏, –ì—Ä—É–∑–∏–∏, –ê—Ä–º–µ–Ω–∏–∏ –∏ –¢—É—Ä—Ü–∏–∏.
–ò –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ì–æ–ª–∏–∫ ‚Äî —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ö–∞—Ç—Ö–∞-–π–æ–≥–∏, –∞—Ä–æ–º–∞–ø—Ä–∞–∫—Ç–∏–∫, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è —Å–ø—É—Ç–Ω–∏—Ü–∞ —Ä–µ—Ç—Ä–∏—Ç–æ–≤.""", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üè∑ –û –±—Ä–µ–Ω–¥–µ")
def about_brand(message):
    bot.send_message(message.chat.id, """ScanDream - https://t.me/scandream - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫, –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. ScanDream - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç –ú–∏—Ä–∞, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –∏ –≤–æ—Å—Ö–∏—â–∞—è—Å—å –µ–≥–æ —Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –ë—ã—Ç—å #scandream - —ç—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –º–µ—á—Ç–æ–π. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º, –∞ –º–µ—á—Ç–∞—Ç—å —à–∏—Ä–æ–∫–æ, –º–æ—â–Ω–æ, —Å–≤–æ–±–æ–¥–Ω–æ –∏ –Ω–µ –æ—â—É—â–∞—è –ø—Ä–µ–¥–µ–ª–∞. 
–ü—Ä–æ–µ–∫—Ç –π–æ–≥–∞-–∫–µ–º–ø - —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—ã—Ç–∞ –∏ –ø–æ–ª—å–∑—ã. –ü–æ–ª—å–∑—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏—è. –£–º–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã.""")

@bot.message_handler(func=lambda m: m.text == "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
def official_sources(message):
    bot.send_message(message.chat.id, """–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π ScanDream:
1. –õ–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö –ê–ª–µ–∫—Å–µ—è - https://vk.ru/scandream
2. –ú–æ—è –ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö - https://vk.ru/yoga.golik
3. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¢–ì –∫–∞–Ω–∞–ª ScanDream‚Ä¢Live - https://t.me/scandream
4. –õ–∏—á–Ω—ã–π –¢–ì –∫–∞–Ω–∞–ª –ê–ª–µ–∫—Å–µ—è - https://t.me/scandreamlife
5. –õ–∏—á–Ω—ã–π –º–æ–π –¢–ì –∫–∞–Ω–∞–ª - https://t.me/yogagolik_dnevnik
6. –ô–æ–≥–∞ —Å –ê–ª–µ–∫—Å–µ–µ–º –ë–∞–±–µ–Ω–∫–æ –≤ –í–ö (–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫) - https://vk.ru/kyogababenko""")

# –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
def back_to_menu(message):
    start(message)

# --- –ú–µ—Ä—á: –º–µ–Ω—é (–Ω–µ —Ç—Ä–æ–Ω—É–ª –æ—Å–Ω–æ–≤–Ω–æ–π UX, –¥–æ–±–∞–≤–∏–ª —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ) ---
@bot.message_handler(func=lambda m: m.text == "üõç –ú–µ—Ä—á")
def merch_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in MERCH_ITEMS:
        kb.add(types.KeyboardButton(name))
    kb.add("üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    bot.send_message(message.chat.id, "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text in MERCH_ITEMS)
def show_merch_item(message):
    name = message.text
    price, photo_file = MERCH_ITEMS[name]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ photos
    if not os.path.exists("photos"):
        logger.error("–ü–∞–ø–∫–∞ photos –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        bot.register_next_step_handler(msg, lambda m: merch_order_choice(m, name))
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ (–¥–ª—è –°—É–º–∫–∞ –®–æ–ø–ø–µ—Ä)
    if isinstance(photo_file, list):
        media = []
        found_valid_photo = False
        for i, file in enumerate(photo_file):
            file_path = f"photos/{file}"
            if os.path.exists(file_path):
                try:
                    with open(file_path, "rb") as f:
                        photo_data = f.read()
                    photo = BytesIO(photo_data)
                    photo.name = file
                    if i == 0:  # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É
                        media.append(types.InputMediaPhoto(photo, caption=f"{name[2:]} ‚Äî {price}‚ÇΩ"))
                    else:
                        media.append(types.InputMediaPhoto(photo))
                    found_valid_photo = True
                    logger.info(f"–§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ {file}: {e}")
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        if media and found_valid_photo:
            try:
                bot.send_media_group(message.chat.id, media)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    else:
        file_path = f"photos/{photo_file}"
        if os.path.exists(file_path):
            try:
                with open(file_path, "rb") as photo:
                    bot.send_photo(message.chat.id, photo, caption=f"{name[2:]} ‚Äî {price}‚ÇΩ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
                bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
    
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    bot.register_next_step_handler(msg, lambda m: merch_order_choice(m, name))

def merch_order_choice(message, item_name):
    if message.text == "‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å":
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å?")
        bot.register_next_step_handler(msg, lambda m: add_merch_quantity(m, item_name))
    else:
        merch_menu(message)

def add_merch_quantity(message, item_name):
    try:
        qty = int(message.text)
        if qty < 1:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (>0):")
        bot.register_next_step_handler(msg, lambda m: add_merch_quantity(m, item_name))
        return

    # —Ü–µ–Ω–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    price = MERCH_ITEMS[item_name][0]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —Ü–µ–Ω–æ–π
    add_to_cart_db(message.chat.id, item_name[2:], qty, price)
    bot.send_message(message.chat.id, f"‚úîÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ: {item_name[2:]} √ó{qty} ({price}‚ÇΩ/—à—Ç)")
    merch_menu(message)

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
def show_merch_cart(message):
    rows = get_cart_items(message.chat.id)
    if not rows:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=kb)
        return
    lines = []
    total = 0
    for item, qty, price in rows:
        line_sum = qty * price
        lines.append(f"- {item}: {qty} √ó {price}‚ÇΩ = {line_sum}‚ÇΩ")
        total += line_sum
    text = "\n".join(lines) + f"\n\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
    bot.send_message(message.chat.id, f"üõí –ö–æ—Ä–∑–∏–Ω–∞:\n{text}", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
def clear_cart_handler(message):
    clear_cart(message.chat.id)
    bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    merch_menu(message)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
def send_merch_order(message):
    # —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π ‚Äî –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É)
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.chat.id)
    result = create_order_from_cart(message.chat.id, username)
    if not result:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    total_sum, order_lines = result
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {username}:\n" + "\n".join(order_lines) + f"\n–ò—Ç–æ–≥–æ: {total_sum}‚ÇΩ"
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É
    bot.send_message(OWNER_ID, order_text)
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É! üéâ\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    merch_menu(message)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
def back_to_merch(message):
    merch_menu(message)

# --- –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ---
@bot.message_handler(func=lambda m: m.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT id, item, quantity, price, total, date, status FROM merch_orders WHERE user_id=? ORDER BY id DESC", (message.chat.id,))
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        merch_menu(message)
        return
    text_lines = []
    for oid, item, qty, price, total, date_str, status in rows:
        text_lines.append(f"#{oid} ‚Äî {item} √ó{qty} ({price}‚ÇΩ/—à—Ç) = {total}‚ÇΩ | {status} | {date_str}")
    bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(text_lines))
    merch_menu(message)

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---
@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.chat.id != OWNER_ID:
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üõç –ó–∞–∫–∞–∑—ã", "üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üì¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_stats(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    # —Å–µ–≥–æ–¥–Ω—è
    today = str(date.today())
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log WHERE date=?", (today,))
    today_count = cur.fetchone()[0]
    # –≤—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º)
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log")
    total_count = cur.fetchone()[0]
    conn.close()
    bot.send_message(OWNER_ID, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–°–µ–≥–æ–¥–Ω—è: {today_count}\n–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {total_count}")

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.text == "üõç –ó–∞–∫–∞–∑—ã")
def admin_orders(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, username, item, quantity, total, date, status FROM merch_orders ORDER BY id DESC LIMIT 50")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(OWNER_ID, "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return
    lines = []
    for oid, user_id, username, item, qty, total, date_str, status in rows:
        lines.append(f"#{oid} | {username} ({user_id}) | {item}√ó{qty} | {total}‚ÇΩ | {status}")
    bot.send_message(OWNER_ID, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(lines))
    bot.send_message(OWNER_ID, "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `status <id> <–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å>` (–Ω–∞–ø—Ä–∏–º–µ—Ä: status 12 –û—Ç–ø—Ä–∞–≤–ª–µ–Ω)", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.text and m.text.startswith("status "))
def admin_change_status(message):
    # —Ñ–æ—Ä–º–∞—Ç: status <id> <–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å>
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: status <id> <–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å>")
        return
    try:
        oid = int(parts[1])
        new_status = parts[2].strip()
    except:
        bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id.")
        return
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM merch_orders WHERE id=?", (oid,))
    row = cur.fetchone()
    if not row:
        bot.send_message(OWNER_ID, f"–ó–∞–∫–∞–∑ #{oid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return
    user_id = row[0]
    cur.execute("UPDATE merch_orders SET status=? WHERE id=?", (new_status, oid))
    conn.commit()
    conn.close()
    bot.send_message(OWNER_ID, f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{oid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_status}")
    try:
        bot.send_message(user_id, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{oid}: {new_status}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.text == "üì¨ –†–∞—Å—Å—ã–ª–∫–∞")
def admin_broadcast_init(message):
    bot.send_message(OWNER_ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º).")
    msg = bot.send_message(OWNER_ID, "–ñ–¥—É —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, admin_broadcast_send)

def admin_broadcast_send(message):
    text = message.text
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM subscriptions")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(OWNER_ID, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    sent = 0
    for (user_id,) in rows:
        try:
            bot.send_message(user_id, text)
            sent += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {user_id}: {e}")
    bot.send_message(OWNER_ID, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent}")

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.text == "üì¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏")
def admin_list_subscribers(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM subscriptions")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(OWNER_ID, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return
    lst = ", ".join([str(r[0]) for r in rows])
    # –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—ã–≤–æ–¥, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç–¥–∞—ë–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
    bot.send_message(OWNER_ID, f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {lst}")

@bot.message_handler(func=lambda m: m.chat.id == OWNER_ID and m.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def admin_back(message):
    start(message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Flask ---
@app.route("/")
def index():
    return "Bot is running!"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    # –∑–∞–ø—É—Å–∫ Flask (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
