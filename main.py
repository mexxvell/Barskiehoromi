import os
import logging
import sqlite3
import threading
import time
import requests
import json
from io import BytesIO
from flask import Flask, request
import telebot
from telebot import types
from datetime import datetime, date

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∏–∑ Environment Variables) ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    raise RuntimeError("TOKEN is required")
OWNER_ID = int(os.getenv("OWNER_TELEGRAM_ID", "0")) or None
if not OWNER_ID:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OWNER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    raise RuntimeError("OWNER_TELEGRAM_ID is required")
RENDER_URL = os.getenv("RENDER_URL", "https://your-app.onrender.com")
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    # –∫–æ—Ä–∑–∏–Ω–∞ (—Å —Ü–µ–Ω–æ–π)
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_cart (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            item TEXT,
            quantity INTEGER,
            price INTEGER
        )
    ''')
    # –ª–æ–≥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS user_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT
        )
    ''')
    # —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            item TEXT,
            quantity INTEGER,
            price INTEGER,
            total INTEGER,
            date TEXT,
            status TEXT
        )
    ''')
    # —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö (pending) –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_pending (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            items_json TEXT,
            total INTEGER,
            date TEXT
        )
    ''')
    # –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    cur.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# --- –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –º–µ—Ä—á–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ: (—Ü–µ–Ω–∞, —Ñ–∞–π–ª —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ)) ---
MERCH_ITEMS = {
    "üëú –°—É–º–∫–∞ –®–æ–ø–ø–µ—Ä":   (500, ["shopper.jpg", "shopper1.jpg"]),
    "‚òï –ö—Ä—É–∂–∫–∏":    (300, "mug.jpg"),
    "üëï –§—É—Ç–±–æ–ª–∫–∏":  (800, "tshirt.jpg")
}

# --- Rate limiting (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞) ---
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: last_action_time["{user_id}:{action}"] = timestamp
last_action_time = {}
DEFAULT_LIMIT_SECONDS = 2  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

def allowed_action(user_id: int, action: str, limit_seconds: int = DEFAULT_LIMIT_SECONDS):
    key = f"{user_id}:{action}"
    now = time.time()
    last = last_action_time.get(key, 0)
    if now - last < limit_seconds:
        return False
    last_action_time[key] = now
    return True

def send_rate_limited_message(chat_id):
    try:
        bot.send_message(chat_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞).")
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ: {e}")

# --- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ª–æ–≥ ---
def log_user(user_id):
    today = str(date.today())
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM user_log WHERE user_id=? AND date=?", (user_id, today))
    if not cur.fetchone():
        cur.execute("INSERT INTO user_log (user_id, date) VALUES (?, ?)", (user_id, today))
        conn.commit()
    conn.close()

# --- –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 23:59) ---
def send_daily_stats():
    while True:
        now = datetime.now()
        if now.hour == 23 and now.minute == 59:
            today = str(date.today())
            conn = sqlite3.connect('bot_data.db')
            cur = conn.cursor()
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log WHERE date=?", (today,))
            count = cur.fetchone()[0]
            conn.close()
            try:
                bot.send_message(OWNER_ID, f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {today}: {count}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
            time.sleep(60)  # –∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        time.sleep(10)

threading.Thread(target=send_daily_stats, daemon=True).start()

# --- –ê–≤—Ç–æ–ø–∏–Ω–≥ ---
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping", timeout=5)
            logger.info("–ü–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ DB-—Ñ—É–Ω–∫—Ü–∏–∏ ---
def add_to_cart_db(user_id, item, quantity, price):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO merch_cart (user_id, item, quantity, price) VALUES (?, ?, ?, ?)",
                (user_id, item, quantity, price))
    conn.commit()
    conn.close()

def get_cart_items(user_id):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT item, quantity, price FROM merch_cart WHERE user_id=?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def clear_cart(user_id):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM merch_cart WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def create_pending_from_cart(user_id, username):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ merch_pending –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–µ –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (pending_id, items_list, total_sum) –∏–ª–∏ None –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.
    """
    items = get_cart_items(user_id)
    if not items:
        return None
    today = str(date.today())
    items_list = []
    total_sum = 0
    for item, qty, price in items:
        total = qty * price
        total_sum += total
        items_list.append({"item": item, "quantity": qty, "price": price, "total": total})
    items_json = json.dumps(items_list, ensure_ascii=False)
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO merch_pending (user_id, username, items_json, total, date) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, items_json, total_sum, today))
    pid = cur.lastrowid
    conn.commit()
    conn.close()
    return pid, items_list, total_sum

def get_pending(pending_id):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, username, items_json, total, date FROM merch_pending WHERE id=?", (pending_id,))
    row = cur.fetchone()
    conn.close()
    return row

def delete_pending(pending_id):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM merch_pending WHERE id=?", (pending_id,))
    conn.commit()
    conn.close()

def move_pending_to_orders(pending_id):
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç pending –≤ merch_orders (–ø–æ –∫–∞–∂–¥–æ–º—É item —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å), –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    row = get_pending(pending_id)
    if not row:
        return False
    _, user_id, username, items_json, total, date_str = row
    try:
        items = json.loads(items_json)
    except:
        items = []
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    for it in items:
        item = it.get("item")
        qty = int(it.get("quantity", 0))
        price = int(it.get("price", 0))
        total_item = int(it.get("total", qty * price))
        cur.execute(
            "INSERT INTO merch_orders (user_id, username, item, quantity, price, total, date, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username, item, qty, price, total_item, date_str, "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        )
    conn.commit()
    conn.close()
    # –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_cart(user_id)
    # —É–¥–∞–ª–∏—Ç—å pending
    delete_pending(pending_id)
    return True

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@bot.message_handler(commands=["start"])
def start(message):
    # rate limit for main /start
    if not allowed_action(message.chat.id, "start", limit_seconds=1):
        send_rate_limited_message(message.chat.id)
        return
    log_user(message.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        types.KeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞"),
        types.KeyboardButton("üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
        types.KeyboardButton("üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞"),
        types.KeyboardButton("üì∏ –ú–µ–¥–∏–∞"),
        types.KeyboardButton("üõç –ú–µ—Ä—á"),
        types.KeyboardButton("üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏")
    )
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                "üë• –ö–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞–º–∏\n"
                "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç—É—Ä—ã –∏ —Ä–µ—Ç—Ä–∏—Ç—ã\n"
                "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                "üì∏ –ú–µ–¥–∏–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
                "üõç –ú–µ—Ä—á ‚Äî –æ–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ScanDream\n"
                "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏ ‚Äî –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏ –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞—Ç—å –Ω–∞—à–∏ –±—É–¥—É—â–∏–µ –ø–æ–µ–∑–¥–∫–∏!", reply_markup=kb)

# --- –†–∞–∑–¥–µ–ª—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞) ---
@bot.message_handler(func=lambda m: m.text == "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
def travels_menu(message):
    if not allowed_action(message.chat.id, "travels_menu"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", "üåç –ì–¥–µ –º—ã —Å–µ–π—á–∞—Å", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: –∞—Ä—Ö–∏–≤ –∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞")
def yoga_menu(message):
    if not allowed_action(message.chat.id, "yoga_menu"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞", "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞: –æ—Ñ–ª–∞–π–Ω, –æ–Ω–ª–∞–π–Ω –∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è.", reply_markup=kb)

# --- –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –µ—Å—Ç—å, —Å rate limit –≥–¥–µ –ª–æ–≥–∏—á–Ω–æ) ---
@bot.message_handler(func=lambda m: m.text == "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞")
def online_yoga(message):
    if not allowed_action(message.chat.id, "online_yoga"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–î–∞, —Ö–æ—á—É", "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", "üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
    bot.send_message(message.chat.id, """–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –≤ –ø–æ–ª–µ –º–∞—Å—Ç–µ—Ä–∞ –æ–Ω–ª–∞–π–Ω. –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–∏–∫—Ç—É–µ–º—ã–µ —ç–ø–æ—Ö–æ–π –í–æ–¥–æ–ª–µ—è. –ú–µ–¥–∏—Ç–∞—Ü–∏–∏. –†–∞–±–æ—Ç–∞ –≤ –º–∞–ª—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.
–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –≤—Ç –∏ —á—Ç –≤ 05:00 –ø–æ –º—Å–∫. –í—Å–µ –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –≥—Ä—É–ø–ø—ã.
–¶–µ–Ω–Ω–æ—Å—Ç—å: 2500 —Ä—É–±–ª–µ–π –º–µ—Å—è—Ü, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ - 2300 —Ä—É–±.
–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª–∞—Å—Å?""", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "–î–∞, —Ö–æ—á—É")
def try_online_yoga(message):
    if not allowed_action(message.chat.id, "try_online_yoga"):
        send_rate_limited_message(message.chat.id)
        return
    bot.send_message(message.chat.id, "https://disk.yandex.ru/i/nCQFa8edIspzNA")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", "üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –æ–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")
def buy_subscription(message):
    if not allowed_action(message.chat.id, "buy_subscription"):
        send_rate_limited_message(message.chat.id)
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–ª–∞–¥–µ–ª—å—Ü—É
    user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.chat.id} —Ö–æ—á–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–Ω–ª–∞–π–Ω-–π–æ–≥—É."
    bot.send_message(OWNER_ID, user_info)
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üòä", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –æ–Ω–ª–∞–π–Ω-–π–æ–≥–µ")
def back_to_online_yoga_menu(message):
    if not allowed_action(message.chat.id, "back_to_online_yoga"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞", "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞: –æ—Ñ–ª–∞–π–Ω, –æ–Ω–ª–∞–π–Ω –∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è.", reply_markup=kb)

# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∫–∞–∫ –±—ã–ª–∏) ---
@bot.message_handler(func=lambda m: m.text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def upcoming_events(message):
    if not allowed_action(message.chat.id, "upcoming_events"):
        send_rate_limited_message(message.chat.id)
        return
    bot.send_message(message.chat.id, """- 10 –∞–≤–≥—É—Å—Ç–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ ¬´–ë–æ–ª—å—à–æ–π –í–æ–ª–∂—Å–∫–∏–π –ü—É—Ç—å¬ª, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –∞–≤—Ç–æ–¥–æ–º–µ –∏–∑ –ö–∞—Ä–µ–ª–∏–∏ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏ –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥:

7 –∞–≤–≥—É—Å—Ç–∞ - –¢–æ–ª—å—è—Ç—Ç–∏ - <a href="https://t.me/+PosQ9pcHMIk4NjQ6">–ë–æ–ª—å—à–æ–π –∫–ª–∞—Å—Å –∏ —Å–∞—É–Ω–¥—Ö–∏–¥–∏–Ω–≥</a>
9 –∞–≤–≥—É—Å—Ç–∞ - –í–æ–ª–≥–æ–≥—Ä–∞–¥ - <a href="https://t.me/+ii8MpmrGhMo2YTVi">–ë–æ–ª—å—à–æ–π –∫–ª–∞—Å—Å –∏ —Å–∞—É–Ω–¥—Ö–∏–ª–∏–Ω–≥</a>
10 –∞–≤–≥—É—Å—Ç–∞ - –ø–ª–æ—â–∞–¥–∫–∞ 17 —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏ - –ë–æ–ª—å—à–æ–π –∫–ª–∞—Å—Å.

11 - 19 –∞–≤–≥—É—Å—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏ (–í–æ–ª–≥–æ–≥—Ä–∞–¥)""", parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "‚ñ∂Ô∏è YouTube")
def youtube_channel(message):
    if not allowed_action(message.chat.id, "youtube_channel"):
        send_rate_limited_message(message.chat.id)
        return
    bot.send_message(message.chat.id, "https://www.youtube.com/@ScanDreamChannel")

@bot.message_handler(func=lambda m: m.text == "üì∏ –ú–µ–¥–∏–∞")
def media_menu(message):
    if not allowed_action(message.chat.id, "media_menu"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ñ∂Ô∏è YouTube", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üé• –ú–µ–¥–∏–∞: –Ω–∞—à–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube.", reply_markup=kb)

# --- –î–æ–ø. —É—Å–ª—É–≥–∏: –ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ ---
@bot.message_handler(func=lambda m: m.text == "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏")
def services_menu(message):
    if not allowed_action(message.chat.id, "services_menu"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è", "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è")
def subscribe_events(message):
    if not allowed_action(message.chat.id, "subscribe_events"):
        send_rate_limited_message(message.chat.id)
        return
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    try:
        cur.execute("INSERT OR IGNORE INTO subscriptions (user_id) VALUES (?)", (message.chat.id,))
        conn.commit()
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è. –ë—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ç—Ä–∏—Ç–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()

@bot.message_handler(func=lambda m: m.text == "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π")
def unsubscribe_events(message):
    if not allowed_action(message.chat.id, "unsubscribe_events"):
        send_rate_limited_message(message.chat.id)
        return
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    try:
        cur.execute("DELETE FROM subscriptions WHERE user_id=?", (message.chat.id,))
        conn.commit()
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–±—ã—Ç–∏–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()

@bot.message_handler(func=lambda m: m.text == "üë• –ö–æ–º–∞–Ω–¥–∞")
def team_menu(message):
    if not allowed_action(message.chat.id, "team_menu"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè∑ –û –±—Ä–µ–Ω–¥–µ", "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, """–ù–∞—Å –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π –ë–∞–±–µ–Ω–∫–æ ‚Äî —É—á–∏—Ç–µ–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏, –≤–∏–∑–∏–æ–Ω–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—Å—Ç, –º–µ–¥–∏–∞-–ø—Ä–æ–¥—é—Å–µ—Ä.
–ë–æ–ª–µ–µ 20 –ª–µ—Ç –ª–∏—á–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, 18 –ª–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ç—Ä–µ–Ω–∏–Ω–≥–∞ —à–∫–æ–ª—ã –ê–º—Ä–∏—Ç –ù–∞–º –°–∞—Ä–æ–≤–∞—Ä (–§—Ä–∞–Ω—Ü–∏—è) –≤ –†–æ—Å—Å–∏–∏.
–°–æ–∑–¥–∞—Ç–µ–ª—å –π–æ–≥–∞-–∫–µ–º–ø–∞ –∏ —Ä–µ—Ç—Ä–∏—Ç–æ–≤ –ø–æ –ö–∞—Ä–µ–ª–∏–∏, –°–µ–≤–µ—Ä–Ω–æ–π –û—Å–µ—Ç–∏–∏, –ì—Ä—É–∑–∏–∏, –ê—Ä–º–µ–Ω–∏–∏ –∏ –¢—É—Ä—Ü–∏–∏.
–ò –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ì–æ–ª–∏–∫ ‚Äî —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ö–∞—Ç—Ö–∞-–π–æ–≥–∏, –∞—Ä–æ–º–∞–ø—Ä–∞–∫—Ç–∏–∫, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è —Å–ø—É—Ç–Ω–∏—Ü–∞ —Ä–µ—Ç—Ä–∏—Ç–æ–≤.""", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üè∑ –û –±—Ä–µ–Ω–¥–µ")
def about_brand(message):
    if not allowed_action(message.chat.id, "about_brand"):
        send_rate_limited_message(message.chat.id)
        return
    bot.send_message(message.chat.id, """ScanDream - https://t.me/scandream - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫, –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. ScanDream - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç –ú–∏—Ä–∞, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –∏ –≤–æ—Å—Ö–∏—â–∞—è—Å—å –µ–≥–æ —Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –ë—ã—Ç—å #scandream - —ç—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –º–µ—á—Ç–æ–π. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º, –∞ –º–µ—á—Ç–∞—Ç—å —à–∏—Ä–æ–∫–æ, –º–æ—â–Ω–æ, —Å–≤–æ–±–æ–¥–Ω–æ –∏ –Ω–µ –æ—â—É—â–∞—è –ø—Ä–µ–¥–µ–ª–∞. 
–ü—Ä–æ–µ–∫—Ç –π–æ–≥–∞-–∫–µ–º–ø - —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—ã—Ç–∞ –∏ –ø–æ–ª—å–∑—ã. –ü–æ–ª—å–∑—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏—è. –£–º–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã.""")

@bot.message_handler(func=lambda m: m.text == "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
def official_sources(message):
    if not allowed_action(message.chat.id, "official_sources"):
        send_rate_limited_message(message.chat.id)
        return
    bot.send_message(message.chat.id, """–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π ScanDream:
1. –õ–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö –ê–ª–µ–∫—Å–µ—è - https://vk.ru/scandream
2. –ú–æ—è –ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö - https://vk.ru/yoga.golik
3. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¢–ì –∫–∞–Ω–∞–ª ScanDream‚Ä¢Live - https://t.me/scandream
4. –õ–∏—á–Ω—ã–π –¢–ì –∫–∞–Ω–∞–ª –ê–ª–µ–∫—Å–µ—è - https://t.me/scandreamlife
5. –õ–∏—á–Ω—ã–π –º–æ–π –¢–ì –∫–∞–Ω–∞–ª - https://t.me/yogagolik_dnevnik
6. –ô–æ–≥–∞ —Å –ê–ª–µ–∫—Å–µ–µ–º –ë–∞–±–µ–Ω–∫–æ –≤ –í–ö (–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫) - https://vk.ru/kyogababenko""")

# –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
def back_to_menu(message):
    if not allowed_action(message.chat.id, "back_to_menu"):
        send_rate_limited_message(message.chat.id)
        return
    start(message)

# --- –ú–µ—Ä—á: –º–µ–Ω—é (–¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã") ---
@bot.message_handler(func=lambda m: m.text == "üõç –ú–µ—Ä—á")
def merch_menu(message):
    if not allowed_action(message.chat.id, "merch_menu"):
        send_rate_limited_message(message.chat.id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in MERCH_ITEMS:
        kb.add(types.KeyboardButton(name))
    kb.add("üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    bot.send_message(message.chat.id, "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text in MERCH_ITEMS)
def show_merch_item(message):
    if not allowed_action(message.chat.id, "show_merch_item"):
        send_rate_limited_message(message.chat.id)
        return
    name = message.text
    price, photo_file = MERCH_ITEMS[name]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ photos
    if not os.path.exists("photos"):
        logger.error("–ü–∞–ø–∫–∞ photos –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        bot.register_next_step_handler(msg, lambda m: merch_order_choice(m, name))
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ (–¥–ª—è –°—É–º–∫–∞ –®–æ–ø–ø–µ—Ä)
    if isinstance(photo_file, list):
        media = []
        found_valid_photo = False
        for i, file in enumerate(photo_file):
            file_path = f"photos/{file}"
            if os.path.exists(file_path):
                try:
                    with open(file_path, "rb") as f:
                        photo_data = f.read()
                    photo = BytesIO(photo_data)
                    photo.name = file
                    if i == 0:  # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É
                        media.append(types.InputMediaPhoto(photo, caption=f"{name[2:]} ‚Äî {price}‚ÇΩ"))
                    else:
                        media.append(types.InputMediaPhoto(photo))
                    found_valid_photo = True
                    logger.info(f"–§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ {file}: {e}")
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        if media and found_valid_photo:
            try:
                bot.send_media_group(message.chat.id, media)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    else:
        file_path = f"photos/{photo_file}"
        if os.path.exists(file_path):
            try:
                with open(file_path, "rb") as photo:
                    bot.send_photo(message.chat.id, photo, caption=f"{name[2:]} ‚Äî {price}‚ÇΩ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
                bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
        else:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
    
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    bot.register_next_step_handler(msg, lambda m: merch_order_choice(m, name))

def merch_order_choice(message, item_name):
    if not allowed_action(message.chat.id, "merch_order_choice"):
        send_rate_limited_message(message.chat.id)
        return
    if message.text == "‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å":
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å?")
        bot.register_next_step_handler(msg, lambda m: add_merch_quantity(m, item_name))
    else:
        merch_menu(message)

def add_merch_quantity(message, item_name):
    if not allowed_action(message.chat.id, "add_merch_quantity", limit_seconds=2):
        send_rate_limited_message(message.chat.id)
        return
    try:
        qty = int(message.text)
        if qty < 1:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (>0):")
        bot.register_next_step_handler(msg, lambda m: add_merch_quantity(m, item_name))
        return

    # —Ü–µ–Ω–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    price = MERCH_ITEMS[item_name][0]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —Ü–µ–Ω–æ–π
    add_to_cart_db(message.chat.id, item_name[2:], qty, price)
    bot.send_message(message.chat.id, f"‚úîÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ: {item_name[2:]} √ó{qty} ({price}‚ÇΩ/—à—Ç)")
    merch_menu(message)

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
def show_merch_cart(message):
    if not allowed_action(message.chat.id, "show_merch_cart", limit_seconds=2):
        send_rate_limited_message(message.chat.id)
        return
    rows = get_cart_items(message.chat.id)
    if not rows:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=kb)
        return
    lines = []
    total = 0
    for item, qty, price in rows:
        line_sum = qty * price
        lines.append(f"- {item}: {qty} √ó {price}‚ÇΩ = {line_sum}‚ÇΩ")
        total += line_sum
    text = "\n".join(lines) + f"\n\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
    bot.send_message(message.chat.id, f"üõí –ö–æ—Ä–∑–∏–Ω–∞:\n{text}", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
def clear_cart_handler(message):
    if not allowed_action(message.chat.id, "clear_cart", limit_seconds=1):
        send_rate_limited_message(message.chat.id)
        return
    clear_cart(message.chat.id)
    bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    merch_menu(message)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
def send_merch_order(message):
    # rate limit for sending order
    if not allowed_action(message.chat.id, "send_merch_order", limit_seconds=3):
        send_rate_limited_message(message.chat.id)
        return
    # –°–æ–∑–¥–∞—ë–º pending –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    username = f"@{message.from_user.username}" if message.from_user.username else str(message.chat.id)
    res = create_pending_from_cart(message.chat.id, username)
    if not res:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    pending_id, items_list, total_sum = res
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    order_lines = [f"- {it['item']} √ó{it['quantity']} = {it['total']}‚ÇΩ" for it in items_list]
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è) #{pending_id} –æ—Ç {username}:\n" + "\n".join(order_lines) + f"\n–ò—Ç–æ–≥–æ: {total_sum}‚ÇΩ"
    # inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    ikb = types.InlineKeyboardMarkup()
    ikb.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_pending:{pending_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_pending:{pending_id}")
    )
    try:
        bot.send_message(OWNER_ID, order_text, reply_markup=ikb)
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
def back_to_merch(message):
    if not allowed_action(message.chat.id, "back_to_merch"):
        send_rate_limited_message(message.chat.id)
        return
    merch_menu(message)

# --- –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ---
@bot.message_handler(func=lambda m: m.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    if not allowed_action(message.chat.id, "my_orders"):
        send_rate_limited_message(message.chat.id)
        return
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT id, item, quantity, price, total, date, status FROM merch_orders WHERE user_id=? ORDER BY id DESC", (message.chat.id,))
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        merch_menu(message)
        return
    text_lines = []
    for oid, item, qty, price, total, date_str, status in rows:
        text_lines.append(f"#{oid} ‚Äî {item} √ó{qty} ({price}‚ÇΩ/—à—Ç) = {total}‚ÇΩ | {status} | {date_str}")
    bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(text_lines))
    merch_menu(message)

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (inline) –∏ –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---
@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.chat.id != OWNER_ID:
        return
    ikb = types.InlineKeyboardMarkup(row_width=1)
    ikb.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("üõç –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
        types.InlineKeyboardButton("üì¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="admin_subscribers"),
        types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")
    )
    bot.send_message(OWNER_ID, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (inline):", reply_markup=ikb)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ (inline –∫–Ω–æ–ø–∫–∏) ---
@bot.callback_query_handler(func=lambda call: True)
def callback_query_handler(call: types.CallbackQuery):
    data = call.data
    user_id = call.from_user.id
    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω inline (–∫—Ä–æ–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è pending/decline, —Ç–æ–∂–µ –≤–ª–∞–¥–µ–ª—å—Ü—É)
    if data == "admin_back" and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        start(call.message)
        return

    if data == "admin_stats" and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        today = str(date.today())
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log WHERE date=?", (today,))
        today_count = cur.fetchone()[0]
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log")
        total_count = cur.fetchone()[0]
        conn.close()
        bot.send_message(OWNER_ID, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–°–µ–≥–æ–¥–Ω—è: {today_count}\n–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {total_count}")
        return

    if data == "admin_subscribers" and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM subscriptions")
        rows = cur.fetchall()
        conn.close()
        if not rows:
            bot.send_message(OWNER_ID, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        else:
            lst = ", ".join([str(r[0]) for r in rows])
            bot.send_message(OWNER_ID, f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {lst}")
        return

    if data == "admin_broadcast" and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        # –ø—Ä–æ—Å–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π flow: –ø–æ–ø—Ä–æ—Å–∏–º –≤ —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        msg = bot.send_message(OWNER_ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º).")
        bot.register_next_step_handler(msg, admin_broadcast_send)
        return

    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)
    if data == "admin_orders" and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, username, item, quantity, total, date, status FROM merch_orders ORDER BY id DESC LIMIT 50")
        rows = cur.fetchall()
        conn.close()
        if not rows:
            bot.send_message(OWNER_ID, "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
            return
        # –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        ikb = types.InlineKeyboardMarkup(row_width=1)
        for oid, uid, username, item, qty, total, date_str, status in rows:
            label = f"#{oid} | {username} | {item}√ó{qty} | {total}‚ÇΩ | {status}"
            ikb.add(types.InlineKeyboardButton(label, callback_data=f"open_order:{oid}"))
        ikb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        bot.send_message(OWNER_ID, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è):", reply_markup=ikb)
        return

    # –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ (–ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ + –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
    if data and data.startswith("open_order:") and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        try:
            oid = int(data.split(":", 1)[1])
        except:
            bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id –∑–∞–∫–∞–∑–∞.")
            return
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, username, item, quantity, price, total, date, status FROM merch_orders WHERE id=?", (oid,))
        row = cur.fetchone()
        conn.close()
        if not row:
            bot.send_message(OWNER_ID, f"–ó–∞–∫–∞–∑ #{oid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        _, uid, username, item, qty, price, total, date_str, status = row
        text = f"–ó–∞–∫–∞–∑ #{oid}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({uid})\n–¢–æ–≤–∞—Ä: {item}\n–ö–æ–ª-–≤–æ: {qty}\n–¶–µ–Ω–∞: {price}‚ÇΩ/—à—Ç\n–°—É–º–º–∞: {total}‚ÇΩ\n–î–∞—Ç–∞: {date_str}\n–°—Ç–∞—Ç—É—Å: {status}"
        # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π)
        statuses = ["–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", "–û—Ç–∫–ª–æ–Ω—ë–Ω"]
        ikb = types.InlineKeyboardMarkup(row_width=2)
        for st in statuses:
            if st != status:
                ikb.add(types.InlineKeyboardButton(st, callback_data=f"change_status:{oid}:{st}"))
        ikb.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"delete_order:{oid}"))
        ikb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_orders"))
        bot.send_message(OWNER_ID, text, reply_markup=ikb)
        return

    # –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–∞–¥–º–∏–Ω)
    if data and data.startswith("change_status:") and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        parts = data.split(":", 2)
        if len(parts) < 3:
            bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        try:
            oid = int(parts[1])
            new_status = parts[2]
        except:
            bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM merch_orders WHERE id=?", (oid,))
        row = cur.fetchone()
        if not row:
            conn.close()
            bot.send_message(OWNER_ID, f"–ó–∞–∫–∞–∑ #{oid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_for_notify = row[0]
        cur.execute("UPDATE merch_orders SET status=? WHERE id=?", (new_status, oid))
        conn.commit()
        conn.close()
        bot.send_message(OWNER_ID, f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{oid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_status}")
        try:
            bot.send_message(user_for_notify, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{oid}: {new_status}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_for_notify}: {e}")
        return

    # —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (–∞–¥–º–∏–Ω)
    if data and data.startswith("delete_order:") and user_id == OWNER_ID:
        bot.answer_callback_query(call.id)
        try:
            oid = int(data.split(":", 1)[1])
        except:
            bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id.")
            return
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM merch_orders WHERE id=?", (oid,))
        row = cur.fetchone()
        cur.execute("DELETE FROM merch_orders WHERE id=?", (oid,))
        conn.commit()
        conn.close()
        bot.send_message(OWNER_ID, f"–ó–∞–∫–∞–∑ #{oid} —É–¥–∞–ª—ë–Ω.")
        if row:
            try:
                bot.send_message(row[0], f"–í–∞—à –∑–∞–∫–∞–∑ #{oid} —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è pending –∑–∞–∫–∞–∑–æ–≤ (–≤–ª–∞–¥–µ–ª–µ—Ü)
    if data and data.startswith("confirm_pending:") and user_id == OWNER_ID:
        bot.answer_callback_query(call.id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–∫–∞–∑")
        try:
            pid = int(data.split(":", 1)[1])
        except:
            bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id pending.")
            return
        pending = get_pending(pid)
        if not pending:
            bot.send_message(OWNER_ID, f"–û–∂–∏–¥–∞—é—â–∏–π –∑–∞–∫–∞–∑ #{pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ø–µ—Ä–µ–Ω–æ—Å–∏–º pending -> orders, –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ok = move_pending_to_orders(pid)
        if ok:
            _, uid, username, items_json, total, date_str = pending
            bot.send_message(OWNER_ID, f"–ó–∞–∫–∞–∑ #{pid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∑–∞–∫–∞–∑—ã.")
            try:
                bot.send_message(uid, f"–í–∞—à –∑–∞–∫–∞–∑ #{pid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º. –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ. –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        else:
            bot.send_message(OWNER_ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return

    if data and data.startswith("decline_pending:") and user_id == OWNER_ID:
        bot.answer_callback_query(call.id, "–û—Ç–∫–ª–æ–Ω—è—é –∑–∞–∫–∞–∑")
        try:
            pid = int(data.split(":", 1)[1])
        except:
            bot.send_message(OWNER_ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id pending.")
            return
        pending = get_pending(pid)
        if not pending:
            bot.send_message(OWNER_ID, f"–û–∂–∏–¥–∞—é—â–∏–π –∑–∞–∫–∞–∑ #{pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        _, uid, username, items_json, total, date_str = pending
        # —É–¥–∞–ª—è–µ–º pending –∏ –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É)
        delete_pending(pid)
        try:
            clear_cart(uid)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(OWNER_ID, f"–ó–∞–∫–∞–∑ #{pid} –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω.")
        try:
            bot.send_message(uid, f"–í–∞—à –∑–∞–∫–∞–∑ #{pid} –æ—Ç–∫–ª–æ–Ω—ë–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º. –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        return

    # fallback: –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π callback ‚Äî –ø—Ä–æ—Å—Ç–æ ack
    try:
        bot.answer_callback_query(call.id)
    except:
        pass

# --- –†–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω) ---
def admin_broadcast_send(message):
    text = message.text
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM subscriptions")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        bot.send_message(OWNER_ID, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    sent = 0
    for (user_id,) in rows:
        try:
            bot.send_message(user_id, text)
            sent += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {user_id}: {e}")
    bot.send_message(OWNER_ID, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent}")

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π webhook –∏ –∑–∞–ø—É—Å–∫ Flask ---
@app.route("/")
def index():
    return "Bot is running!"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))

