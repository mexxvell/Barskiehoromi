import os
import logging
import threading
import requests
import sqlite3
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, OWNER_ID, RENDER_URL]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –§–ª—ç—à-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –µ–¥—ã
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            user_id INTEGER,
            meal_type TEXT,
            dish TEXT,
            time TEXT
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bike_rentals (
            user_id INTEGER,
            bike_type TEXT,
            rent_time TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ú–µ–Ω—é –±–ª—é–¥
FOOD_MENU = {
    "breakfast": {
        "ü•û –Ø–∏—á–Ω–∏—Ü–∞": {"price": 500, "photo": "egg.jpg"},
        "üßá –ë–ª–∏–Ω—ã": {"price": 450, "photo": "pancake.jpg"},
        "üçµ –ß–∞–π": {"price": 200, "photo": None}
    },
    "dinner": {
        "üç≤ –°—É–ø": {"price": 350, "photo": "soup.jpg"},
        "üêü –†—ã–±–∞": {"price": 600, "photo": "fish.jpg"},
        "üçµ –ß–∞–π": {"price": 150, "photo": None}
    }
}

# –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

# –ú–µ–Ω—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤
BIKE_MENU = {
    "üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥ 1": {"price_hour": 500, "price_day": 1000, "photo": "bike1.jpg"},
    "üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥ 2": {"price_hour": 600, "price_day": 1200, "photo": "bike2.jpg"}
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ)
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =================
@bot.message_handler(commands=["start"])
def start(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("üö¥ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    )
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é\n"
        "2) –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "3) –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –µ–¥—ã —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "4) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ö–æ–∑—è–µ–≤–∞–º\n"
        "5) –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–û –¥–æ–º–µ'.")
    with open("photos/main_photo.jpg", "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üè° –û –¥–æ–º–µ:\n"
                    "–ù–∞—à –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –º–µ—Å—Ç–µ. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç.\n"
                    "–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."
        )
    home_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    home_submenu.add(types.KeyboardButton("üçΩ –ï–¥–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=home_submenu)

@bot.message_handler(func=lambda m: m.text == "üçΩ –ï–¥–∞")
def handle_food(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ï–¥–∞'.")
    meal_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    meal_keyboard.add(
        types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üçΩ –£–∂–∏–Ω"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üçΩ –ú–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ —É–∂–∏–Ω.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ö–æ–∑—è–µ–≤–∞–º.",
        reply_markup=meal_keyboard
    )

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def choose_meal_type(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª {meal_type}.")
    buttons = [types.KeyboardButton(food) for food in FOOD_MENU[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=types.ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True))

@bot.message_handler(func=lambda m: m.text in FOOD_MENU["breakfast"] or m.text in FOOD_MENU["dinner"])
def add_to_cart(message):
    meal_type = "breakfast" if message.text in FOOD_MENU["breakfast"] else "dinner"
    dish_info = FOOD_MENU[meal_type][message.text]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –¥–æ–±–∞–≤–∏–ª '{message.text}' –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if dish_info["photo"]:
        try:
            with open(f"photos/{dish_info['photo']}", "rb") as photo:
                bot.send_photo(message.chat.id, photo, caption=f"{message.text} - {dish_info['price']}‚ÇΩ")
        except FileNotFoundError:
            bot.send_message(message.chat.id, f"{message.text} - {dish_info['price']}‚ÇΩ")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É?", reply_markup=markup)
    bot.register_next_step_handler(message, lambda m: confirm_add_to_cart(m, meal_type, message.text))

def confirm_add_to_cart(message, meal_type, dish):
    if message.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É":
        conn = sqlite3.connect('bot_data.db')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO orders (user_id, meal_type, dish, time) VALUES (?, ?, ?, ?)",
            (message.chat.id, meal_type, dish, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        )
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"‚úÖ '{dish}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    go_back_to_food(message)

def go_back_to_food(message):
    meal_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    meal_keyboard.add(
        types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üçΩ –£–∂–∏–Ω"),
        types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=meal_keyboard)

@bot.message_handler(func=lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish, meal_type FROM orders WHERE user_id=?", (message.chat.id,))
    items = cursor.fetchall()
    conn.close()
    if not items:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
        return
    total = sum(FOOD_MENU[meal_type][dish]["price"] for dish, meal_type in items)
    cart_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join([f"- {dish} ({meal_type.capitalize()}) - {FOOD_MENU[meal_type][dish]['price']}‚ÇΩ" for dish, meal_type in items])
    cart_text += f"\n\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, cart_text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
def confirm_order(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*[types.KeyboardButton(time) for time in TIME_SLOTS["breakfast"] + TIME_SLOTS["dinner"]])
    markup.add(types.KeyboardButton("‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_delivery_time)

def handle_delivery_time(message):
    if message.text == "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, save_custom_time)
    else:
        save_order(message)

def save_custom_time(message):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        return
    save_order(message, custom_time=message.text)

def save_order(message, custom_time=None):
    user_id = message.chat.id
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish, meal_type FROM orders WHERE user_id=?", (user_id,))
    items = cursor.fetchall()
    order_text = f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
    for dish, meal_type in items:
        order_text += f"üçΩÔ∏è {meal_type.capitalize()} - {dish}\n"
    if custom_time:
        order_text += f"‚è∞ –í—Ä–µ–º—è: {custom_time}\n"
    else:
        order_text += f"‚è∞ –í—Ä–µ–º—è: {message.text}\n"
    bot.send_message(OWNER_ID, order_text)
    cursor.execute("DELETE FROM orders WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(user_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º!", reply_markup=types.ReplyKeyboardRemove())
    start(message)

@bot.message_handler(func=lambda m: m.text == "üåÜ –ì–æ—Ä–æ–¥")
def handle_city(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ì–æ—Ä–æ–¥'.")
    city_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    city_submenu.add(
        types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"),
        types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"),
        types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üåÜ –ì. –ë–µ–ª–æ–º–æ—Ä—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è:\n"
        "–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~12 000 —á–µ–ª.\n"
        "–®—Ç–∞–± –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –í–û–í –Ω–∞—Ö–æ–¥–∏–ª—Å—è –∑–¥–µ—Å—å.",
        reply_markup=city_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞")
def handle_museum(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ú—É–∑–µ–π'.")
    try:
        with open("photos/museum_carpathian_front.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, –¥. 26"
            )
    except FileNotFoundError:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ç–æ –º—É–∑–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    go_back_to_city(message)

@bot.message_handler(func=lambda m: m.text == "üöñ –¢–∞–∫—Å–∏")
def handle_taxi(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–¢–∞–∫—Å–∏'.")
    bot.send_message(
        message.chat.id,
        "üöñ –¢–∞–∫—Å–∏:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫—Å–∏: +7-999-999-99-99",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[types.KeyboardButton("üîô –ù–∞–∑–∞–¥")]])
    )

@bot.message_handler(func=lambda m: m.text == "üè• –ë–æ–ª—å–Ω–∏—Ü–∞")
def handle_hospital(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ë–æ–ª—å–Ω–∏—Ü–∞'.")
    bot.send_message(
        message.chat.id,
        "üè• –ë–æ–ª—å–Ω–∏—Ü–∞:\n"
        "–ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–æ–ª—å–Ω–∏—á–Ω–∞—è, –¥. 1",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[types.KeyboardButton("üîô –ù–∞–∑–∞–¥")]])
    )

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã")
def handle_souvenirs(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–°—É–≤–µ–Ω–∏—Ä—ã'.")
    souvenir_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    souvenir_submenu.add(
        types.KeyboardButton("üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã:",
        reply_markup=souvenir_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
def handle_magnet(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ú–∞–≥–Ω–∏—Ç'.")
    try:
        with open("photos/souvenir_magnet.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ (50 –≥—Ä) - 100—Ä"
            )
    except FileNotFoundError:
        bot.send_message(message.chat.id, "‚ùå –§–æ—Ç–æ –º–∞–≥–Ω–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    go_back_to_city(message)

@bot.message_handler(func=lambda m: m.text == "üö¥ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤")
def bike_rental(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '–ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤'.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥ 1"),
        types.KeyboardButton("üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥ 2"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in BIKE_MENU)
def show_bike_details(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª '{message.text}'.")
    bike = BIKE_MENU[message.text]
    try:
        with open(f"photos/{bike['photo']}", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=f"üö≤ {message.text}\n"
                        f"–¶–µ–Ω—ã:\n"
                        f"- 1 —á–∞—Å: {bike['price_hour']}‚ÇΩ\n"
                        f"- –¶–µ–ª—ã–π –¥–µ–Ω—å: {bike['price_day']}‚ÇΩ"
            )
    except FileNotFoundError:
        bot.send_message(message.chat.id, f"üö≤ {message.text}\n"
                                        f"–¶–µ–Ω—ã:\n"
                                        f"- 1 —á–∞—Å: {bike['price_hour']}‚ÇΩ\n"
                                        f"- –¶–µ–ª—ã–π –¥–µ–Ω—å: {bike['price_day']}‚ÇΩ")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_bike_rental)

def confirm_bike_rental(message):
    if message.text == "‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å":
        conn = sqlite3.connect('bot_data.db')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO bike_rentals (user_id, bike_type, rent_time) VALUES (?, ?, ?)",
            (message.chat.id, message.text, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        )
        conn.commit()
        conn.close()
        bot.send_message(OWNER_ID, f"üö¥ –ù–æ–≤—ã–π –ø—Ä–æ–∫–∞—Ç –æ—Ç @{message.from_user.username}!")
        bot.send_message(message.chat.id, "‚úÖ –í–µ–ª–æ—Å–∏–ø–µ–¥ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –•–æ–∑—è–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
    start(message)

@bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def handle_feedback(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.")
    bot.send_message(
        message.chat.id,
        "üí¨ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∏–ª–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'."
    )
    bot.register_next_step_handler(message, send_feedback)

def send_feedback(message):
    user_message = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: {user_message}")
    message_text = f"üì¨ –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n{user_message}"
    bot.send_message(OWNER_ID, message_text)
    bot.send_message(
        message.chat.id,
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ–∑—è–µ–≤–∞–º!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    start(message)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("üö¥ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)

def go_back_to_city(message):
    city_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    city_submenu.add(
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"),
        types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"),
        types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=city_submenu)

# ================= –§–õ–≠–®-–ú–ê–†–®–†–£–¢–´ =================
@app.route("/")
def index():
    return "Telegram-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

@app.route(f"/{TOKEN}", methods=["POST", "HEAD"])
def webhook():
    if request.method == "POST":
        try:
            update = types.Update.de_json(request.get_json(force=True))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º force=True –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            bot.process_new_updates([update])
            logger.info("–í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –µ–≥–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
    return "", 200

@app.route("/ping")
def ping():
    logger.info("–ü–æ–ª—É—á–µ–Ω ping-–∑–∞–ø—Ä–æ—Å.")
    return "OK", 200

# ================= –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê =================
def self_ping():
    while True:
        try:
            response = requests.get(f"{RENDER_URL}/ping")
            logger.info(f"Self-ping: Status {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ self-ping: {str(e)}")
        threading.Event().wait(300)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv("PORT", 8000))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç Render
    app.run(host="0.0.0.0", port=port)
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞
    ping_thread = threading.Thread(target=self_ping, daemon=True)
    ping_thread.start()
