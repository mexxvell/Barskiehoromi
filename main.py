import os
import sqlite3
import logging
import threading
import schedule
import time
from datetime import datetime, timedelta
from flask import Flask, request
import telebot
from telebot import types
import requests

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cart (
            user_id INTEGER,
            dish TEXT,
            price INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bike_rentals (
            user_id INTEGER,
            bike_type TEXT,
            rent_time DATETIME
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –ú–µ–Ω—é ---
FOOD_MENU = {
    "breakfast": {
        "–Ø–∏—á–Ω–∏—Ü–∞ (150–≥)": 500,
        "–ö–æ—Ñ–µ": 200,
        "–ë–ª–∏–Ω—ã (180–≥)": 450
    },
    "dinner": {
        "–°—É–ø (300–≥)": 350,
        "–†—ã–±–∞ (250–≥)": 600,
        "–ß–∞–π": 150
    }
}

BIKE_MENU = {
    "–í–µ–ª–æ—Å–∏–ø–µ–¥ 1": {"price_hour": 500, "price_day": 1000, "photo": "bike1.jpg"},
    "–í–µ–ª–æ—Å–∏–ø–µ–¥ 2": {"price_hour": 600, "price_day": 1200, "photo": "bike2.jpg"}
}

TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –ö–û–†–ó–ò–ù–ê =================
@bot.message_handler(func=lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish, price FROM cart WHERE user_id=?", (message.chat.id,))
    items = cursor.fetchall()
    conn.close()

    if not items:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total = sum(item[1] for item in items)
    cart_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join([f"- {dish}: {price}‚ÇΩ" for dish, price in items]) + f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, cart_text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
def confirm_cart(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"), types.KeyboardButton("üçΩ –£–∂–∏–Ω"), types.KeyboardButton("‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω", "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"])
def handle_delivery_time(message):
    if message.text == "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
        bot.register_next_step_handler(message, save_custom_time)
    else:
        save_order(message)

def save_custom_time(message):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    save_order(message, custom_time=message.text)

def save_order(message, custom_time=None):
    user_id = message.chat.id
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish FROM cart WHERE user_id=?", (user_id,))
    dishes = [item[0] for item in cursor.fetchall()]
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username}:\n" + "\n".join(dishes)
    
    if custom_time:
        order_text += f"\n‚è∞ –í—Ä–µ–º—è: {custom_time}"
    else:
        order_text += f"\n‚è∞ –í—Ä–µ–º—è: {message.text}"
    
    bot.send_message(OWNER_ID, order_text)
    cursor.execute("DELETE FROM cart WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(user_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())

# ================= –ü–†–û–ö–ê–¢ –í–ï–õ–û–°–ò–ü–ï–î–û–í =================
@bot.message_handler(func=lambda m: m.text == "üö≤ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤")
def bike_rental(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–í–µ–ª–æ—Å–∏–ø–µ–¥ 1"), types.KeyboardButton("–í–µ–ª–æ—Å–∏–ø–µ–¥ 2"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–í–µ–ª–æ—Å–∏–ø–µ–¥ 1", "–í–µ–ª–æ—Å–∏–ø–µ–¥ 2"])
def show_bike_details(message):
    bike = BIKE_MENU[message.text]
    with open(f"photos/{bike['photo']}", "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=f"üö≤ {message.text}\n"
                    f"–¶–µ–Ω—ã:\n"
                    f"- 1 —á–∞—Å: {bike['price_hour']}‚ÇΩ\n"
                    f"- –¶–µ–ª—ã–π –¥–µ–Ω—å: {bike['price_day']}‚ÇΩ\n"
                    f"–ü—Ä–∞–≤–∏–ª–∞: –≤–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å–ø—Ä–∞–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
        )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –•–æ—á—É –∫–∞—Ç–∞—Ç—å—Å—è!"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –•–æ—á—É –∫–∞—Ç–∞—Ç—å—Å—è!")
def confirm_bike_rental(message):
    bot.send_message(OWNER_ID, f"üö¥ –ù–æ–≤—ã–π –ø—Ä–æ–∫–∞—Ç –æ—Ç @{message.from_user.username}!")
    bot.send_message(message.chat.id, "‚úÖ –í–µ–ª–æ—Å–∏–ø–µ–¥ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –•–æ–∑—è–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())

# ================= –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ =================
@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üçΩ –ï–¥–∞"), types.KeyboardButton("üö≤ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "üè° –û –¥–æ–º–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üçΩ –ï–¥–∞")
def handle_food(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"), types.KeyboardButton("üçΩ –£–∂–∏–Ω"), types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def show_food_menu(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for dish in FOOD_MENU[meal_type]:
        markup.add(types.KeyboardButton(dish))
    markup.add(types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=markup)

@bot.message_handler(func=lambda m: any(m.text in dishes for dishes in FOOD_MENU.values()))
def add_to_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO cart VALUES (?, ?, ?)", (message.chat.id, message.text, FOOD_MENU["breakfast" if "–ó–∞–≤—Ç—Ä–∞–∫" in message.text else "dinner"][message.text]))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f"‚úÖ {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# ================= –ê–í–¢–û–ü–ò–ù–ì =================
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping")
            logger.info("–ê–≤—Ç–æ–ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

# ================= FLASK ROUTES =================
@app.route("/")
def index():
    return "Bot is running!", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = types.Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    return "", 200

@app.route("/ping")
def ping():
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
