import os
import re
import sqlite3
import logging
import threading
import time
import datetime
from flask import Flask, request
import telebot
from telebot import types
import requests

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required")

try:
    OWNER_ID = int(os.getenv("OWNER_TELEGRAM_ID"))
except (TypeError, ValueError):
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OWNER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    raise RuntimeError("OWNER_TELEGRAM_ID must be set to a valid integer")

RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cart (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            dish TEXT,
            meal_type TEXT,
            price INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bike_rentals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            bike_type TEXT,
            rent_time DATETIME
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –ú–µ–Ω—é ---
FOOD_MENU = {
    "breakfast": {
        "–Ø–∏—á–Ω–∏—Ü–∞ (150–≥)":     {"price": 500, "photo": "egg.jpg"},
        "–ö–æ—Ñ–µ (200–º–ª)":        {"price": 200, "photo": None},
        "–ë–ª–∏–Ω—ã (180–≥)":       {"price": 450, "photo": "pancake.jpg"},
        "–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è (250–≥)": {"price": 300, "photo": None},
        "–¢–æ—Å—Ç—ã —Å –¥–∂–µ–º–æ–º (120–≥)": {"price": 350, "photo": None}
    },
    "dinner": {
        "–°—É–ø (300–≥)":                {"price": 350, "photo": "soup.jpg"},
        "–†—ã–±–∞ (250–≥)":               {"price": 600, "photo": "fish.jpg"},
        "–ß–∞–π (250–º–ª)":               {"price": 150, "photo": None},
        "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ (200–≥)":  {"price": 250, "photo": None},
        "–ö–æ—Ç–ª–µ—Ç–∞ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É (180–≥)": {"price": 400, "photo": None}
    }
}

BIKE_MENU = {
    "–í–µ–ª–æ—Å–∏–ø–µ–¥ 1": {"price_hour": 500, "price_day": 1000, "photo": "bike1.jpg"},
    "–í–µ–ª–æ—Å–∏–ø–µ–¥ 2": {"price_hour": 600, "price_day": 1200, "photo": "bike2.jpg"}
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =================

@bot.message_handler(commands=["start"])
def start(message):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    )
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    try:
        with open("photos/main_photo.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="üè° –£—é—Ç–Ω—ã–π –¥–æ–º —Å –≤–∏–¥–æ–º –Ω–∞ –ª–µ—Å. –í—Å–µ —É–¥–æ–±—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã."
            )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª photos/main_photo.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.send_message(message.chat.id, "üè° –£—é—Ç–Ω—ã–π –¥–æ–º —Å –≤–∏–¥–æ–º –Ω–∞ –ª–µ—Å. –í—Å–µ —É–¥–æ–±—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üçΩ –ï–¥–∞"),
        types.KeyboardButton("üö≤ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üåÜ –ì–æ—Ä–æ–¥")
def handle_city(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"),
        types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"),
        types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üåÜ –ì. –ë–µ–ª–æ–º–æ—Ä—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è:\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~12¬†000¬†—á–µ–ª.",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞")
def handle_museum(message):
    try:
        with open("photos/museum.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, 26"
            )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª photos/museum.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.send_message(message.chat.id, "üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, 26")
    # –ó–¥–µ—Å—å –ù–ï–¢ –≤—ã–∑–æ–≤–∞ start(), —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ –º–µ–Ω—é ¬´–ì–æ—Ä–æ–¥¬ª

@bot.message_handler(func=lambda m: m.text == "üöñ –¢–∞–∫—Å–∏")
def handle_taxi(message):
    bot.send_message(message.chat.id, "üöñ –¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫—Å–∏: +7-999-999-99-99")
    # –ó–¥–µ—Å—å —Ç–æ–∂–µ –æ—Å—Ç–∞—ë–º—Å—è –≤ –º–µ–Ω—é ¬´–ì–æ—Ä–æ–¥¬ª

@bot.message_handler(func=lambda m: m.text == "üè• –ë–æ–ª—å–Ω–∏—Ü–∞")
def handle_hospital(message):
    bot.send_message(message.chat.id, "üè• –ê–¥—Ä–µ—Å –±–æ–ª—å–Ω–∏—Ü—ã: —É–ª. –ë–æ–ª—å–Ω–∏—á–Ω–∞—è, 1")
    # –ó–¥–µ—Å—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ ‚Äústart‚Äù ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ ¬´–ì–æ—Ä–æ–¥¬ª

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã")
def handle_souvenirs(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
def handle_magnet(message):
    try:
        with open("photos/magnet.jpg", "rb") as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption="üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ - 100‚ÇΩ"
            )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª photos/magnet.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.send_message(message.chat.id, "üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ - 100‚ÇΩ")
    # –ü–æ—Å–ª–µ —Ñ–æ—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º start() ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ ¬´–°—É–≤–µ–Ω–∏—Ä—ã¬ª

@bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def handle_feedback(message):
    msg = bot.send_message(message.chat.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(msg, send_feedback)

def send_feedback(message):
    user_tag = message.from_user.username or str(message.from_user.id)
    try:
        bot.send_message(OWNER_ID, f"üì¨ –û—Ç–∑—ã–≤ –æ—Ç @{user_tag}:\n{message.text}")
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())

# --- –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ ---
@bot.message_handler(func=lambda m: m.text == "üö≤ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤")
def bike_rental(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–í–µ–ª–æ—Å–∏–ø–µ–¥ 1"),
        types.KeyboardButton("–í–µ–ª–æ—Å–∏–ø–µ–¥ 2"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["–í–µ–ª–æ—Å–∏–ø–µ–¥ 1", "–í–µ–ª–æ—Å–∏–ø–µ–¥ 2"])
def show_bike_details(message):
    bike = BIKE_MENU.get(message.text)
    if bike:
        if bike["photo"]:
            try:
                with open(f"photos/{bike['photo']}", "rb") as photo:
                    bot.send_photo(
                        message.chat.id,
                        photo,
                        caption=(
                            f"üö≤ {message.text}\n"
                            f"–¶–µ–Ω—ã:\n- 1 —á–∞—Å: {bike['price_hour']}‚ÇΩ\n"
                            f"- –¶–µ–ª—ã–π –¥–µ–Ω—å: {bike['price_day']}‚ÇΩ"
                        )
                    )
            except FileNotFoundError:
                logger.error(f"–§–æ—Ç–æ –¥–ª—è {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                bot.send_message(
                    message.chat.id,
                    f"üö≤ {message.text}\n–¶–µ–Ω—ã:\n- 1 —á–∞—Å: {bike['price_hour']}‚ÇΩ\n- –¶–µ–ª—ã–π –¥–µ–Ω—å: {bike['price_day']}‚ÇΩ"
                )
        else:
            bot.send_message(
                message.chat.id,
                f"üö≤ {message.text}\n–¶–µ–Ω—ã:\n- 1 —á–∞—Å: {bike['price_hour']}‚ÇΩ\n- –¶–µ–ª—ã–π –¥–µ–Ω—å: {bike['price_day']}‚ÇΩ"
            )
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("‚úÖ –•–æ—á—É –∫–∞—Ç–∞—Ç—å—Å—è!"),
            types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        )
        bot.send_message(message.chat.id, "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda m: m.text == "‚úÖ –•–æ—á—É –∫–∞—Ç–∞—Ç—å—Å—è!")
def confirm_bike_rental(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–µ–Ω–¥—É –≤ –ë–î
    try:
        conn = sqlite3.connect('bot_data.db')
        cursor = conn.cursor()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ –≤—ã–±–∏—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
        # –¥–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ –æ–Ω –æ—Ç–≤–µ—Ç–∏–ª reply_to –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ show_bike_details
        bike_type = None
        if message.reply_to_message and message.reply_to_message.caption:
            # –ü—Ä–∏–º–µ—Ä: "üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥ 1\n–¶–µ–Ω—ã: ... "
            text = message.reply_to_message.caption
            if "–í–µ–ª–æ—Å–∏–ø–µ–¥ 1" in text:
                bike_type = "–í–µ–ª–æ—Å–∏–ø–µ–¥¬†1"
            elif "–í–µ–ª–æ—Å–∏–ø–µ–¥ 2" in text:
                bike_type = "–í–µ–ª–æ—Å–∏–ø–µ–¥¬†2"
        if not bike_type:
            bike_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥"
        cursor.execute(
            "INSERT INTO bike_rentals (user_id, bike_type, rent_time) VALUES (?, ?, ?)",
            (message.chat.id, bike_type, datetime.datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∫–∞—Ç–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –≤ –ë–î: {e}")

    user_tag = message.from_user.username or str(message.from_user.id)
    try:
        bot.send_message(OWNER_ID, f"üö¥ –ù–æ–≤—ã–π –ø—Ä–æ–∫–∞—Ç –æ—Ç @{user_tag}: {bike_type}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∫–∞—Ç–µ: {e}")

    bot.send_message(message.chat.id, "‚úÖ –í–µ–ª–æ—Å–∏–ø–µ–¥ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –•–æ–∑—è–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=types.ReplyKeyboardRemove())
    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤¬ª
    bike_rental(message)

# --- –ï–¥–∞ –∏ –∫–æ—Ä–∑–∏–Ω–∞ ---
@bot.message_handler(func=lambda m: m.text == "üçΩ –ï–¥–∞")
def handle_food(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üçΩ –£–∂–∏–Ω"),
        types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def show_food_menu(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for dish in FOOD_MENU[meal_type]:
        markup.add(types.KeyboardButton(dish))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=markup)

@bot.message_handler(func=lambda m: (m.text in FOOD_MENU.get("breakfast", {})) or (m.text in FOOD_MENU.get("dinner", {})))
def add_to_cart(message):
    meal_type = "breakfast" if message.text in FOOD_MENU["breakfast"] else "dinner"
    dish_info = FOOD_MENU[meal_type][message.text]

    if dish_info["photo"]:
        try:
            with open(f"photos/{dish_info['photo']}", "rb") as photo:
                bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            logger.error(f"–§–æ—Ç–æ –¥–ª—è {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            bot.send_message(message.chat.id, f"{message.text} ‚Äî {dish_info['price']}‚ÇΩ")
    else:
        bot.send_message(message.chat.id, f"{message.text} ‚Äî {dish_info['price']}‚ÇΩ")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    msg = bot.send_message(message.chat.id, f"{message.text} ‚Äî {dish_info['price']}‚ÇΩ", reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m, mt=meal_type, ds=message.text: confirm_add_to_cart(m, mt, ds))

def confirm_add_to_cart(message, meal_type, dish):
    if message.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É":
        try:
            conn = sqlite3.connect('bot_data.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO cart (user_id, dish, meal_type, price) VALUES (?, ?, ?, ?)",
                (message.chat.id, dish, meal_type, FOOD_MENU[meal_type][dish]["price"])
            )
            conn.commit()
            conn.close()
            bot.send_message(message.chat.id, f"‚úÖ {dish} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ï–¥–∞¬ª
    handle_food(message)

@bot.message_handler(func=lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish, meal_type, price FROM cart WHERE user_id=?", (message.chat.id,))
    items = cursor.fetchall()
    conn.close()

    if not items:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
        return

    total = sum(item[2] for item in items)
    cart_text = (
        "üõí –í–∞—à –∑–∞–∫–∞–∑:\n"
        + "\n".join([f"- {dish} ({meal_type}): {price}‚ÇΩ" for dish, meal_type, price in items])
        + f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, cart_text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
def confirm_cart(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("09:00"),
        types.KeyboardButton("18:00"),
        types.KeyboardButton("‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:00):", reply_markup=markup)

@bot.message_handler(func=lambda m: re.match(r"^(09:00|18:00|‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è)$", m.text))
def handle_delivery_time(message):
    if message.text == "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
        prompt = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(prompt, save_custom_time)
    else:
        save_order(message, custom_time=message.text)

def save_custom_time(message):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        bot.register_next_step_handler(message, save_custom_time)
        return
    save_order(message, custom_time=message.text)

def save_order(message, custom_time=None):
    user_id = message.chat.id
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish, meal_type FROM cart WHERE user_id=?", (user_id,))
    items = cursor.fetchall()

    if not items:
        bot.send_message(message.chat.id, "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
        conn.close()
        return

    user_tag = message.from_user.username or str(message.from_user.id)
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{user_tag}:\n"
    for dish, meal_type in items:
        order_text += f"- {dish} ({meal_type.capitalize()})\n"

    order_time = custom_time if custom_time else message.text
    order_text += f"‚è∞ –í—Ä–µ–º—è: {order_time}"

    try:
        bot.send_message(OWNER_ID, order_text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=types.ReplyKeyboardRemove())
        conn.close()
        return

    cursor.execute("DELETE FROM cart WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(user_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
    # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ï–¥–∞¬ª ‚Äî –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
    handle_food(message)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    # –ü—Ä–æ—Å—Ç–æ–π –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
    start(message)

# --- –ê–≤—Ç–æ–ø–∏–Ω–≥ ---
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping", timeout=5)
            logger.info("–ê–≤—Ç–æ–ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

# --- Flask-—Ä–æ—É—Ç—ã ---
@app.route("/")
def index():
    return "Bot is running!", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = types.Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    return "", 200

@app.route("/ping")
def ping():
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
