import os
import logging
import threading
import requests
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    Application,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OWNER_ID = os.getenv('OWNER_TELEGRAM_ID')  # Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
RENDER_URL = os.getenv('RENDER_URL', 'https://barskiehoromi.onrender.com ')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TOKEN, RENDER_URL]):
    raise EnvironmentError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –°–ª–æ–≤–∞—Ä–∏
TIME_SLOTS = {
    'breakfast': ['08:00', '09:00', '10:00'],
    'dinner': ['18:00', '19:00', '20:00']
}

FOOD_MENU = {
    'breakfast': {
        'ü•û –Ø–∏—á–Ω–∏—Ü–∞': 'omelette',
        'üßá –ë–ª–∏–Ω—ã': 'pancakes',
        'üçµ –ß–∞–π': 'tea'
    },
    'dinner': {
        'üç≤ –°—É–ø 1': 'soup1',
        'üç≤ –°—É–ø 2': 'soup2',
        'üçñ –ü—é—Ä–µ —Å –º—è—Å–æ–º': 'meat_puree'
    }
}

PHOTO_PATHS = {
    'main': 'photos/main_photo.jpg',
    'room1': 'photos/room1.jpg',
    'room2': 'photos/room2.jpg',
    'museum': 'photos/museum_carpathian_front.jpg',
    'souvenir': 'photos/souvenir_magnet.jpg'
}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
            ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
        ],
        resize_keyboard=True
    )

    with open(PHOTO_PATHS['main'], 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_keyboard
        )
    context.user_data['current_menu'] = 'main'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
async def choose_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    room_number = text[-1]
    context.user_data['room'] = room_number
    context.user_data['current_menu'] = 'meal'

    with open(PHOTO_PATHS[f'room{room_number}'], 'rb') as photo:
        await update.message.reply_photo(photo=photo)

    meal_keyboard = ReplyKeyboardMarkup(
        [
            ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩÔ∏è –£–∂–∏–Ω"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=meal_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –µ–¥—ã
async def choose_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    # –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –∫ —Ç–∏–ø–∞–º –µ–¥—ã
    meal_type_map = {
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫": "breakfast",
        "üçΩÔ∏è –£–∂–∏–Ω": "dinner"
    }

    meal_type = meal_type_map.get(text)
    if not meal_type:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    context.user_data['meal_type'] = meal_type
    context.user_data['current_menu'] = 'food'

    menu = FOOD_MENU[meal_type]
    buttons = [[key] for key in menu.keys()]
    buttons.append(["üîô –ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
async def choose_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    meal_type = context.user_data['meal_type']
    food_choice = next(k for k, v in FOOD_MENU[meal_type].items() if k == text)
    context.user_data['food_choice'] = food_choice
    context.user_data['current_menu'] = 'time'

    time_slots = TIME_SLOTS[meal_type]
    buttons = [[slot] for slot in time_slots]
    buttons.append(["üîô –ù–∞–∑–∞–¥"])
    keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥":
        await go_back(update, context)
        return

    time_choice = text.strip()

    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º –¥–æ–º–∞!", reply_markup=ReplyKeyboardRemove())

    room = context.user_data['room']
    meal_type = context.user_data['meal_type']
    food = next(k for k, v in FOOD_MENU[meal_type].items() if v == context.user_data['food_choice'])

    message = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞: {room}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type.capitalize()}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_choice}"
    )
    await context.bot.send_message(chat_id=OWNER_ID, text=message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
async def handle_attractions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_menu'] = 'attractions'
    attractions_keyboard = ReplyKeyboardMarkup(
        [
            ["üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("üèõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=attractions_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"
async def handle_museum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(PHOTO_PATHS['museum'], 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, –¥. 26"
        )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(
        [["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"], ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°—É–≤–µ–Ω–∏—Ä—ã"
async def handle_souvenirs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_menu'] = 'souvenirs'
    souvenir_keyboard = ReplyKeyboardMarkup(
        [
            ["üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"],
            ["üîô –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text("üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–≤–µ–Ω–∏—Ä:", reply_markup=souvenir_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"
async def handle_magnet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(PHOTO_PATHS['souvenir'], 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption="üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"
        )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(
        [["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"], ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_menu = context.user_data.get('current_menu', 'main')
    if current_menu == 'main':
        return

    if current_menu == 'meal':
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
                ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)
    elif current_menu == 'attractions':
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
                ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)
    elif current_menu == 'food':
        meal_keyboard = ReplyKeyboardMarkup(
            [
                ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩÔ∏è –£–∂–∏–Ω"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:", reply_markup=meal_keyboard)
    elif current_menu == 'time':
        food_keyboard = ReplyKeyboardMarkup(
            [
                [next(k for k, v in FOOD_MENU[context.user_data['meal_type']].items() if v == context.user_data['food_choice'])],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=food_keyboard)
    elif current_menu == 'souvenirs':
        main_keyboard = ReplyKeyboardMarkup(
            [
                ["üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 1"],
                ["üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ 2", "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä"]
            ],
            resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard)

    context.user_data['current_menu'] = 'main'

# –ê–≤—Ç–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
def self_ping():
    while True:
        try:
            response = requests.get(RENDER_URL)
            logging.info(f"Self-ping —É—Å–ø–µ—à–µ–Ω: {response.status_code}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ self-ping: {str(e)}")
        threading.Event().wait(300)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏$'), handle_attractions))
    app.add_handler(MessageHandler(filters.Regex(r'^üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞$'), handle_museum))
    app.add_handler(MessageHandler(filters.Regex(r'^üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä$'), handle_souvenirs))
    app.add_handler(MessageHandler(filters.Regex(r'^üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫$'), handle_magnet))
    app.add_handler(MessageHandler(filters.Regex(r'^üõèÔ∏è –ö–æ–º–Ω–∞—Ç–∞ [12]$'), choose_room))
    app.add_handler(MessageHandler(filters.Regex(r'^üç≥ –ó–∞–≤—Ç—Ä–∞–∫$|^üçΩÔ∏è –£–∂–∏–Ω$'), choose_meal_type))
    app.add_handler(MessageHandler(filters.Regex(r'^ pancakes|omelette|tea|soup1|soup2|meat_puree$'), choose_food))
    app.add_handler(MessageHandler(filters.Regex(r'^\d{2}:\d{2}$'), confirm_order))
    app.add_handler(MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$'), go_back))

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞
    ping_thread = threading.Thread(target=self_ping)
    ping_thread.start()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    PORT = int(os.getenv("PORT", 8000))
    WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"

    logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ URL: {WEBHOOK_URL}")
    await app.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
    await app.run_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)

if __name__ == '__main__':
    asyncio.run(main())