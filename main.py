import os
import re
import sqlite3
import logging
import threading
import schedule
import time
from datetime import datetime, timedelta
from flask import Flask, request
import telebot
from telebot import types
import requests

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cart (
            user_id INTEGER,
            dish TEXT,
            price INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bike_rentals (
            user_id INTEGER,
            bike_type TEXT,
            rent_time DATETIME
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –ú–µ–Ω—é ---
FOOD_MENU = {
    "breakfast": {
        "–Ø–∏—á–Ω–∏—Ü–∞ (150–≥)": 500,
        "–ö–æ—Ñ–µ": 200,
        "–ë–ª–∏–Ω—ã (180–≥)": 450
    },
    "dinner": {
        "–°—É–ø (300–≥)": 350,
        "–†—ã–±–∞ (250–≥)": 600,
        "–ß–∞–π": 150
    }
}

BIKE_MENU = {
    "–í–µ–ª–æ—Å–∏–ø–µ–¥ 1": {"price_hour": 500, "price_day": 1000, "photo": "bike1.jpg"},
    "–í–µ–ª–æ—Å–∏–ø–µ–¥ 2": {"price_hour": 600, "price_day": 1200, "photo": "bike2.jpg"}
}

TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =================
user_data = {}

@bot.message_handler(commands=["start"])
def start(message):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    )
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é\n"
        "2) –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "3) –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –µ–¥—ã —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "4) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ö–æ–∑—è–µ–≤–∞–º\n"
        "5) –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    with open("photos/main_photo.jpg", "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üè° –û –¥–æ–º–µ:\n–ù–∞—à –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –º–µ—Å—Ç–µ. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç.\n–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."
        )
    home_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    home_submenu.add(types.KeyboardButton("üçΩ –ï–¥–∞"), types.KeyboardButton("üö≤ –ü—Ä–æ–∫–∞—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=home_submenu)

@bot.message_handler(func=lambda m: m.text == "üåÜ –ì–æ—Ä–æ–¥")
def handle_city(message):
    city_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    city_submenu.add(types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"), types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"), types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(
        message.chat.id,
        "üåÜ –ì. –ë–µ–ª–æ–º–æ—Ä—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è:\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~12 000 —á–µ–ª.\n–®—Ç–∞–± –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –í–û–í –Ω–∞—Ö–æ–¥–∏–ª—Å—è –∑–¥–µ—Å—å.",
        reply_markup=city_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã")
def handle_souvenirs(message):
    souvenir_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    souvenir_submenu.add(types.KeyboardButton("üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã:", reply_markup=souvenir_submenu)

@bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def handle_feedback(message):
    msg = bot.send_message(message.chat.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(msg, send_feedback)

def send_feedback(message):
    username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.chat.id}"
    bot.send_message(OWNER_ID, f"üì¨ –û—Ç–∑—ã–≤ –æ—Ç {username}:\n{message.text}")
    bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())

# ================= –ö–û–†–ó–ò–ù–ê –ò –ó–ê–ö–ê–ó –ï–î–´ =================
@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def choose_meal_type(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    user_data[message.chat.id] = {"meal_type": meal_type}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for dish in FOOD_MENU[meal_type]:
        markup.add(types.KeyboardButton(dish))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=markup)

@bot.message_handler(func=lambda m: any(m.text in dishes for dishes in [FOOD_MENU["breakfast"], FOOD_MENU["dinner"]]))
def add_to_cart(message):
    user_id = message.chat.id
    meal_type = "breakfast" if message.text in FOOD_MENU["breakfast"] else "dinner"
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO cart VALUES (?, ?, ?)", (user_id, message.text, FOOD_MENU[meal_type][message.text]))
    conn.commit()
    conn.close()
    bot.send_message(user_id, f"‚úÖ {message.text} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@bot.message_handler(func=lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish, price FROM cart WHERE user_id=?", (message.chat.id,))
    items = cursor.fetchall()
    conn.close()

    if not items:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total = sum(item[1] for item in items)
    cart_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join([f"- {dish}: {price}‚ÇΩ" for dish, price in items]) + f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, cart_text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
def confirm_cart(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"), types.KeyboardButton("üçΩ –£–∂–∏–Ω"), types.KeyboardButton("‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω", "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"])
def handle_delivery_time(message):
    if message.text == "‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00):")
        bot.register_next_step_handler(message, save_custom_time)
    else:
        save_order(message)

def save_custom_time(message):
    if not re.match(r"^\d{2}:\d{2}$", message.text):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    save_order(message, custom_time=message.text)

def save_order(message, custom_time=None):
    user_id = message.chat.id
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT dish FROM cart WHERE user_id=?", (user_id,))
    dishes = [item[0] for item in cursor.fetchall()]
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username}:\n" + "\n".join(dishes)
    
    if custom_time:
        order_text += f"\n‚è∞ –í—Ä–µ–º—è: {custom_time}"
    else:
        order_text += f"\n‚è∞ –í—Ä–µ–º—è: {message.text}"
    
    bot.send_message(OWNER_ID, order_text)
    cursor.execute("DELETE FROM cart WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    bot.send_message(user_id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    start(message)

# ================= –ó–ê–ü–£–°–ö –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =================
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping")
            logger.info("–ê–≤—Ç–æ–ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

@app.route("/")
def index():
    return "Bot is running!", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = types.Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    return "", 200

@app.route("/ping")
def ping():
    return "OK", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
