import os
import logging
import threading
import requests
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_TELEGRAM_ID")  
RENDER_URL = os.getenv("RENDER_URL", "https://barskiehoromi.onrender.com")

FOOD_MENU = {
    "breakfast": ["–û–≤—Å—è–Ω–∞—è –∫–∞—à–∞", "–Ø–∏—á–Ω–∏—Ü–∞", "–ë–ª–∏–Ω—ã"],
    "dinner": ["–°—É–ø", "–†—ã–±–∞", "–ü–ª–æ–≤"]
}

TIME_SLOTS = {
    "breakfast": ["08:00", "09:00", "10:00"],
    "dinner": ["18:00", "19:00", "20:00"]
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, OWNER_ID, RENDER_URL]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =================
user_data = {}

@bot.message_handler(commands=["start"])
def start(message):
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main_keyboard.add(
        types.KeyboardButton("üè† –û –¥–æ–º–µ"),
        types.KeyboardButton("üåÜ –ì–æ—Ä–æ–¥"),
        types.KeyboardButton("üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã"),
        types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    )
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¥–æ–º! üè°\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "1) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é\n"
        "2) –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n"
        "3) –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –µ–¥—ã —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "4) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ö–æ–∑—è–µ–≤–∞–º\n"
        "5) –û–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        reply_markup=main_keyboard
    )

@bot.message_handler(func=lambda m: m.text == "üè† –û –¥–æ–º–µ")
def handle_home(message):
    with open("photos/main_photo.jpg", "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üè° –û –¥–æ–º–µ:\n–ù–∞—à –¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –º–µ—Å—Ç–µ. "
                   "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—é—Ç –∏ –∫–æ–º—Ñ–æ—Ä—Ç.\n"
                   "–ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."
        )
    home_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    home_submenu.add(types.KeyboardButton("üçΩ –ï–¥–∞"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=home_submenu)

@bot.message_handler(func=lambda m: m.text == "üçΩ –ï–¥–∞")
def handle_food(message):
    meal_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    meal_keyboard.add(
        types.KeyboardButton("üç≥ –ó–∞–≤—Ç—Ä–∞–∫"),
        types.KeyboardButton("üçΩ –£–∂–∏–Ω"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üçΩ –ú–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤, –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ö–æ–∑—è–µ–≤–∞–º.",
        reply_markup=meal_keyboard
    )

@bot.message_handler(func=lambda m: m.text in ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫", "üçΩ –£–∂–∏–Ω"])
def choose_meal_type(message):
    meal_type = "breakfast" if message.text == "üç≥ –ó–∞–≤—Ç—Ä–∞–∫" else "dinner"
    user_data[message.chat.id] = {"meal_type": meal_type}
    buttons = [types.KeyboardButton(food) for food in FOOD_MENU[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons)
    )

@bot.message_handler(func=lambda m: m.text in FOOD_MENU["breakfast"] + FOOD_MENU["dinner"])
def choose_food(message):
    user_id = message.chat.id
    meal_type = user_data[user_id]["meal_type"]
    user_data[user_id]["food"] = message.text
    buttons = [types.KeyboardButton(slot) for slot in TIME_SLOTS[meal_type]]
    buttons.append(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons)
    )

@bot.message_handler(func=lambda m: any(m.text in slots for slots in TIME_SLOTS.values()))
def confirm_order(message):
    user_id = message.chat.id
    data = user_data.get(user_id, {})
    meal_type = data.get("meal_type", "")
    food = data.get("food", "")
    
    if not meal_type or not food:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ username
    username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {user_id}"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–æ–∑—è–µ–≤–∞–º!", reply_markup=types.ReplyKeyboardRemove())
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
    meal_type_ru = "–ó–∞–≤—Ç—Ä–∞–∫" if meal_type == "breakfast" else "–£–∂–∏–Ω"
    owner_message = (
        f"üõéÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"üçΩÔ∏è –¢–∏–ø: {meal_type_ru}\n"
        f"üç≤ –ë–ª—é–¥–æ: {food}\n"
        f"‚è∞ –í—Ä–µ–º—è: {message.text}"
    )
    bot.send_message(OWNER_ID, owner_message)
    
    del user_data[user_id]

@bot.message_handler(func=lambda m: m.text == "üåÜ –ì–æ—Ä–æ–¥")
def handle_city(message):
    city_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    city_submenu.add(
        types.KeyboardButton("üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞"),
        types.KeyboardButton("üöñ –¢–∞–∫—Å–∏"),
        types.KeyboardButton("üè• –ë–æ–ª—å–Ω–∏—Ü–∞"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üåÜ –ì. –ë–µ–ª–æ–º–æ—Ä—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è:\n"
        "–ù–∞—Å–µ–ª–µ–Ω–∏–µ: ~12 000 —á–µ–ª.\n"
        "–®—Ç–∞–± –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –í–û–í –Ω–∞—Ö–æ–¥–∏–ª—Å—è –∑–¥–µ—Å—å.",
        reply_markup=city_submenu
    )

@bot.message_handler(func=lambda m: m.text == "üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞")
def handle_museum(message):
    with open("photos/museum_carpathian_front.jpg", "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üèõÔ∏è –ú—É–∑–µ–π –ö–∞—Ä–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞\nüìç –ê–¥—Ä–µ—Å: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è, –¥. 26"
        )
    # –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

@bot.message_handler(func=lambda m: m.text in ["üöñ –¢–∞–∫—Å–∏", "üè• –ë–æ–ª—å–Ω–∏—Ü–∞"])
def handle_services(message):
    if message.text == "üöñ –¢–∞–∫—Å–∏":
        bot.send_message(message.chat.id, "üöñ –¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫—Å–∏: +7-999-999-99-99")
    else:
        bot.send_message(message.chat.id, "üè• –ê–¥—Ä–µ—Å –±–æ–ª—å–Ω–∏—Ü—ã: –≥. –ë–µ–ª–æ–º–æ—Ä—Å–∫, —É–ª. –ë–æ–ª—å–Ω–∏—á–Ω–∞—è, –¥. 1")

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã")
def handle_souvenirs(message):
    souvenir_submenu = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    souvenir_submenu.add(
        types.KeyboardButton("üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"), 
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(message.chat.id, "üõçÔ∏è –°—É–≤–µ–Ω–∏—Ä—ã:", reply_markup=souvenir_submenu)

@bot.message_handler(func=lambda m: m.text == "üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
def handle_magnet(message):
    with open("photos/souvenir_magnet.jpg", "rb") as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption="üß≤ –ú–∞–≥–Ω–∏—Ç –Ω–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ (50 –≥—Ä) - 100—Ä"
        )
    # –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

@bot.message_handler(func=lambda m: m.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def handle_feedback(message):
    msg = bot.send_message(message.chat.id, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(msg, send_feedback)

def send_feedback(message):
    username = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.chat.id}"
    bot.send_message(OWNER_ID, f"üì¨ –û—Ç–∑—ã–≤ –æ—Ç {username}:\n{message.text}")
    bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    start(message)

# ================= FLASK ROUTES =================
@app.route("/")
def index():
    return "Telegram-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = types.Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    return "", 200

@app.route("/ping")
def ping():
    return "OK", 200

# ================= –ó–ê–ü–£–°–ö =================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
