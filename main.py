import os
import logging
import sqlite3
import threading
import time
import requests
from flask import Flask, request
import telebot
from telebot import types
from datetime import datetime, date

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    raise RuntimeError("TOKEN is required")
OWNER_ID = int(os.getenv("OWNER_TELEGRAM_ID", "0")) or None
if not OWNER_ID:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OWNER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    raise RuntimeError("OWNER_TELEGRAM_ID is required")
RENDER_URL = os.getenv("RENDER_URL", "https://your-app.onrender.com")
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_cart (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            item TEXT,
            quantity INTEGER
        )
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS user_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# --- –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ –º–µ—Ä—á–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ: (—Ü–µ–Ω–∞, —Ñ–∞–π–ª —Ñ–æ—Ç–æ)) ---
MERCH_ITEMS = {
    "üõí –®–æ–ø–µ—Ä—ã":   (500, "shopper.jpg"),
    "‚òï –ö—Ä—É–∂–∫–∏":    (300, "mug.jpg"),
    "üëï –§—É—Ç–±–æ–ª–∫–∏":  (800, "tshirt.jpg")
}

# --- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ª–æ–≥ ---
def log_user(user_id):
    today = str(date.today())
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM user_log WHERE user_id=? AND date=?", (user_id, today))
    if not cur.fetchone():
        cur.execute("INSERT INTO user_log (user_id, date) VALUES (?, ?)", (user_id, today))
        conn.commit()
    conn.close()

# --- –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É ---
def send_daily_stats():
    while True:
        now = datetime.now()
        if now.hour == 23 and now.minute == 59:
            today = str(date.today())
            conn = sqlite3.connect("bot_data.db")
            cur = conn.cursor()
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM user_log WHERE date=?", (today,))
            count = cur.fetchone()[0]
            conn.close()
            bot.send_message(OWNER_ID, f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {today}: {count}")
            time.sleep(60)  # –∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        time.sleep(10)

threading.Thread(target=send_daily_stats, daemon=True).start()

# --- –ê–≤—Ç–æ–ø–∏–Ω–≥ ---
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping", timeout=5)
            logger.info("–ü–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@bot.message_handler(commands=["start"])
def start(message):
    log_user(message.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        types.KeyboardButton("üë• –ö–æ–º–∞–Ω–¥–∞"),
        types.KeyboardButton("üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
        types.KeyboardButton("üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞"),
        types.KeyboardButton("üì∏ –ú–µ–¥–∏–∞"),
        types.KeyboardButton("üõç –ú–µ—Ä—á"),
        types.KeyboardButton("üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏")
    )
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                "üë• –ö–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞–º–∏\n"
                "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç—É—Ä—ã –∏ —Ä–µ—Ç—Ä–∏—Ç—ã\n"
                "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏‚Äë–π–æ–≥–∞ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                "üì∏ –ú–µ–¥–∏–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
                "üõç –ú–µ—Ä—á ‚Äî –æ–¥–µ–∂–¥–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ScanDream\n"
                "üéÅ –î–æ–ø. —É—Å–ª—É–≥–∏ ‚Äî –≤—Å—ë –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞", reply_markup=kb)

# --- –†–∞–∑–¥–µ–ª—ã ---
@bot.message_handler(func=lambda m: m.text == "1Ô∏è‚É£ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")
def travels_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", "üåç –ì–¥–µ –º—ã —Å–µ–π—á–∞—Å", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: –∞—Ä—Ö–∏–≤ –∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "2Ô∏è‚É£ –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞")
def yoga_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞", "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞: –æ—Ñ–ª–∞–π–Ω, –æ–Ω–ª–∞–π–Ω –∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "3Ô∏è‚É£ –ú–µ–¥–∏–∞")
def media_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ñ∂Ô∏è YouTube", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üé• –ú–µ–¥–∏–∞: –Ω–∞—à–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "5Ô∏è‚É£ –î–æ–ø. —É—Å–ª—É–≥–∏")
def services_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üë• –ö–æ–º–∞–Ω–¥–∞")
def team_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè∑ –û –±—Ä–µ–Ω–¥–µ", "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, " –ù–∞—Å –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π –ë–∞–±–µ–Ω–∫–æ - —É—á–∏—Ç–µ–ª—å –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏, –≤–∏–∑–∏–æ–Ω–µ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—Å—Ç, –º–µ–¥–∏–∞ –ø—Ä–æ–¥—é—Å–µ—Ä. –ë–æ–ª–µ–µ 20 –ª–µ—Ç –ª–∏—á–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∏, 18 –ª–µ—Ç –≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ —à–∫–æ–ª—ã –ê–º—Ä–∏—Ç –ù–∞–º –°–∞—Ä–æ–≤–∞—Ä (–§—Ä–∞–Ω—Ü–∏—è) –≤ –†–æ—Å—Å–∏–∏. –°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ô–æ–≥–∞-–∫–µ–º–ø, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –π–æ–≥–∞-—Ç—É—Ä–æ–≤, —Ä–µ—Ç—Ä–∏—Ç–æ–≤ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ø–æ –ö–∞—Ä–µ–ª–∏–∏, –°–µ–≤–µ—Ä–Ω–æ–π –û—Å–µ—Ç–∏–∏, –ì—Ä—É–∑–∏–∏, –ê—Ä–º–µ–Ω–∏–∏ –∏ –¢—É—Ä—Ü–∏–∏.
–ò –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ì–æ–ª–∏–∫ - —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ö–∞—Ç—Ö–∞-–π–æ–≥–∏, –∞—Ä–æ–º–∞–ø—Ä–∞–∫—Ç–∏–∫, –∏–¥–µ–π–Ω—ã–π –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –∫–æ—Ä–º–∏–ª–µ—Ü–∞ –≥—Ä—É–ø–ø –Ω–∞ –≤—ã–µ–∑–¥–∞—Ö –∏ —Ä–µ—Ç—Ä–∏—Ç–∞—Ö –∫–µ–º–ø–∞.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üè∑ –û –±—Ä–µ–Ω–¥–µ")
def about_brand(message):
    bot.send_message(message.chat.id, "ScanDream - https://t.me/scandream - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫, –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. ScanDream - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç –ú–∏—Ä–∞, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –∏ –≤–æ—Å—Ö–∏—â–∞—è—Å—å –µ–≥–æ —Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –ë—ã—Ç—å #scandream - —ç—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –º–µ—á—Ç–æ–π. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º, –∞ –º–µ—á—Ç–∞—Ç—å —à–∏—Ä–æ–∫–æ, –º–æ—â–Ω–æ, —Å–≤–æ–±–æ–¥–Ω–æ –∏ –Ω–µ –æ—â—É—â–∞—è –ø—Ä–µ–¥–µ–ª–∞. 

–ü—Ä–æ–µ–∫—Ç –π–æ–≥–∞-–∫–µ–º–ø - —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—ã—Ç–∞ –∏ –ø–æ–ª—å–∑—ã. –ü–æ–ª—å–∑—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ —É–º–µ–Ω–∏—è. –£–º–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º—ã.")

@bot.message_handler(func=lambda m: m.text == "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
def official_sources(message):
    bot.send_message(message.chat.id, "–û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π ScanDream:

1. –õ–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö –ê–ª–µ–∫—Å–µ—è - https://vk.ru/scandream
2. –ú–æ—è –ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö - https://vk.ru/yoga.golik
2. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¢–ì –∫–∞–Ω–∞–ª ScanDream‚Ä¢Live - https://t.me/scandream
3. –õ–∏—á–Ω—ã–π  –¢–ì –∫–∞–Ω–∞–ª –ê–ª–µ–∫—Å–µ—è - https://t.me/scandreamlife
4. –õ–∏—á–Ω—ã–π –º–æ–π –¢–ì –∫–∞–Ω–∞–ª -  https://t.me/yogagolik_dnevnik
5. –ô–æ–≥–∞ —Å –ê–ª–µ–∫—Å–µ–µ–º –ë–∞–±–µ–Ω–∫–æ  –≤ –í–ö (–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫) - https://vk.ru/kyogababenko")

# –ù–∞–∑–∞–¥
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
def back_to_menu(message):
    start(message)

# --- –ú–µ—Ä—á ---
@bot.message_handler(func=lambda m: m.text == "4Ô∏è‚É£ –ú–µ—Ä—á")
def merch_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in MERCH_ITEMS:
        kb.add(types.KeyboardButton(name))
    kb.add("üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text in MERCH_ITEMS)
def show_merch_item(message):
    name = message.text
    price, photo_file = MERCH_ITEMS[name]
    try:
        with open(f"photos/{photo_file}", "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=f"{name[2:]} ‚Äî {price}‚ÇΩ")
    except:
        bot.send_message(message.chat.id, f"{name[2:]} ‚Äî {price}‚ÇΩ")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    bot.register_next_step_handler(msg, lambda m: merch_order_choice(m, name))

def merch_order_choice(message, item_name):
    if message.text == "‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å":
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å?")
        bot.register_next_step_handler(msg, lambda m: add_merch_quantity(m, item_name))
    else:
        merch_menu(message)

def add_merch_quantity(message, item_name):
    try:
        qty = int(message.text)
        if qty < 1:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (>0):")
        bot.register_next_step_handler(msg, lambda m: add_merch_quantity(m, item_name))
        return
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO merch_cart (user_id, item, quantity) VALUES (?, ?, ?)", (message.chat.id, item_name[2:], qty))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f"‚úîÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ: {item_name[2:]} √ó{qty}")
    merch_menu(message)

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
def show_merch_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT item, quantity FROM merch_cart WHERE user_id=?", (message.chat.id,))
    rows = cur.fetchall()
    conn.close()
    if not rows:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=kb)
        return
    text = "\n".join([f"- {item}: {qty}" for item, qty in rows])
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
    bot.send_message(message.chat.id, f"üõí –ö–æ—Ä–∑–∏–Ω–∞:\n{text}", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
def send_merch_order(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT item, quantity FROM merch_cart WHERE user_id=?", (message.chat.id,))
    rows = cur.fetchall()
    cur.execute("DELETE FROM merch_cart WHERE user_id=?", (message.chat.id,))
    conn.commit()
    conn.close()
    order = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or message.chat.id}:\n"
    order += "\n".join([f"- {item} √ó{qty}" for item, qty in rows])
    bot.send_message(OWNER_ID, order)
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéâ")

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –ú–µ—Ä—á")
def back_to_merch(message):
    merch_menu(message)

# --- Flask ---
@app.route("/")
def index():
    return "Bot is running!"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))


