import os
import logging
import sqlite3
import threading
import time
import requests
from flask import Flask, request
import telebot
from telebot import types

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    raise RuntimeError("TOKEN is required")
OWNER_ID = int(os.getenv("OWNER_TELEGRAM_ID", "0")) or None
if not OWNER_ID:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OWNER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    raise RuntimeError("OWNER_TELEGRAM_ID is required")
RENDER_URL = os.getenv("RENDER_URL", "https://your-app.onrender.com")
WEBHOOK_URL = f"{RENDER_URL}/{TOKEN}"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---

def init_db():
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS merch_cart (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            item TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =================

@bot.message_handler(commands=["start"])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("1Ô∏è‚É£ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
        types.KeyboardButton("2Ô∏è‚É£ –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞"),
        types.KeyboardButton("3Ô∏è‚É£ –ú–µ–¥–∏–∞"),
        types.KeyboardButton("4Ô∏è‚É£ –ú–µ—Ä—á"),
        types.KeyboardButton("5Ô∏è‚É£ –î–æ–ø. —É—Å–ª—É–≥–∏")
    )
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
        "1Ô∏è‚É£ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n"
        "2Ô∏è‚É£ –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞\n"
        "3Ô∏è‚É£ –ú–µ–¥–∏–∞\n"
        "4Ô∏è‚É£ –ú–µ—Ä—á\n"
        "5Ô∏è‚É£ –î–æ–ø. —É—Å–ª—É–≥–∏"
    )
    bot.send_message(message.chat.id, text, reply_markup=keyboard)

# --- –†–∞–∑–¥–µ–ª: –ú–µ—Ä—á —Å –∫–æ—Ä–∑–∏–Ω–æ–π ---
@bot.message_handler(func=lambda m: m.text and m.text.startswith("4Ô∏è‚É£ –ú–µ—Ä—á"))
def merch_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üõí –®–æ–ø–µ—Ä—ã"),
        types.KeyboardButton("‚òï –ö—Ä—É–∂–∫–∏"),
        types.KeyboardButton("üëï –§—É—Ç–±–æ–ª–∫–∏"),
        types.KeyboardButton("üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
    )
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"))
    info = (
        "üõçÔ∏è –†–∞–∑–¥–µ–ª –ú–µ—Ä—á:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞."
    )
    bot.send_message(message.chat.id, info, reply_markup=keyboard)

for item, label in [("üõí –®–æ–ø–µ—Ä—ã", "–®–æ–ø–µ—Ä ‚Äî 500‚ÇΩ"), ("‚òï –ö—Ä—É–∂–∫–∏", "–ö—Ä—É–∂–∫–∞ ‚Äî 300‚ÇΩ"), ("üëï –§—É—Ç–±–æ–ª–∫–∏", "–§—É—Ç–±–æ–ª–∫–∞ ‚Äî 800‚ÇΩ")]:
    @bot.message_handler(func=lambda m, itm=item: m.text == itm)
    def add_merch(m, item=item):
        conn = sqlite3.connect('bot_data.db')
        cur = conn.cursor()
        cur.execute("INSERT INTO merch_cart (user_id, item) VALUES (?, ?)", (m.chat.id, label))
        conn.commit()
        conn.close()
        bot.send_message(m.chat.id, f"‚úîÔ∏è {label} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        merch_menu(m)

@bot.message_handler(func=lambda m: m.text == "üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
def show_merch_cart(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT item FROM merch_cart WHERE user_id=?", (message.chat.id,))
    items = [row[0] for row in cur.fetchall()]
    conn.close()
    if not items:
        bot.send_message(message.chat.id, "üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")))
        return
    text = "üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join([f"- {i}" for i in items])
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, text, reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å")
def send_merch_order(message):
    conn = sqlite3.connect('bot_data.db')
    cur = conn.cursor()
    cur.execute("SELECT item FROM merch_cart WHERE user_id=?", (message.chat.id,))
    items = [row[0] for row in cur.fetchall()]
    cur.execute("DELETE FROM merch_cart WHERE user_id=?", (message.chat.id,))
    conn.commit()
    conn.close()
    order_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –º–µ—Ä—á–∞ –æ—Ç @{message.from_user.username or message.chat.id}:\n" + "\n".join(items)
    bot.send_message(OWNER_ID, order_text)
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üéâ", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")))

# --- –ê–≤—Ç–æ–ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã ---
def self_ping():
    while True:
        try:
            requests.get(f"{RENDER_URL}/ping", timeout=5)
            logger.info("–ü–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)

threading.Thread(target=self_ping, daemon=True).start()

# --- –ü—Ä–æ—á–∏–µ —Ä–∞–∑–¥–µ–ª—ã (–∫–∞—Ä–∫–∞—Å) ---
@bot.message_handler(func=lambda m: m.text and m.text.startswith("1Ô∏è‚É£ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"))
def travels_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"), types.KeyboardButton("üåç –ì–¥–µ –º—ã —Å–µ–π—á–∞—Å"))
    kb.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"))
    bot.send_message(message.chat.id,
                     "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: –∞—Ä—Ö–∏–≤ –∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.",
                     reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìÇ –ê—Ä—Ö–∏–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")
def travels_archive(message):
    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞—Ä—Ö–∏–≤ –Ω–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π üó∫Ô∏è")

@bot.message_handler(func=lambda m: m.text == "üåç –ì–¥–µ –º—ã —Å–µ–π—á–∞—Å")
def travels_now(message):
    bot.send_message(message.chat.id, "–ú—ã —Å–µ–π—á–∞—Å –≤: ... üìç")

@bot.message_handler(func=lambda m: m.text and m.text.startswith("2Ô∏è‚É£ –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞"))
def yoga_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), types.KeyboardButton("üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞"))
    kb.add(types.KeyboardButton("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"))
    bot.send_message(message.chat.id,
                     "üßò –ö—É–Ω–¥–∞–ª–∏–Ω–∏-–π–æ–≥–∞: –æ—Ñ–ª–∞–π–Ω, –æ–Ω–ª–∞–π–Ω –∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è.",
                     reply_markup=kb)

@bot.message_handler(func=lambda m: m.text in ["üè¢ –û—Ñ–ª–∞–π–Ω-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è","üíª –û–Ω–ª–∞–π–Ω-–π–æ–≥–∞","üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"] )
def yoga_handlers(message):
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.")

@bot.message_handler(func=lambda m: m.text and m.text.startswith("3Ô∏è‚É£ –ú–µ–¥–∏–∞"))
def media_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚ñ∂Ô∏è YouTube"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"))
    bot.send_message(message.chat.id,
                     "üé• –ú–µ–¥–∏–∞: –Ω–∞—à–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube.",
                     reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚ñ∂Ô∏è YouTube")
def media_youtube(message):
    bot.send_message(message.chat.id, "–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å: https://www.youtube.com/your_channel")

@bot.message_handler(func=lambda m: m.text == "5Ô∏è‚É£ –î–æ–ø. —É—Å–ª—É–≥–∏")
def services_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"))
    bot.send_message(message.chat.id,
                     "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: –¥–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
                     reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
def back_to_start(message):
    start(message)

# --- Flask-—Ä–æ—É—Ç—ã ---
@app.route("/", methods=["GET"])
def index():
    return "Bot is running!", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
